Index: androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.androidApp\r\n\r\nimport android.app.Application\r\nimport com.yandex.metrica.YandexMetrica\r\nimport com.yandex.metrica.YandexMetricaConfig\r\nimport io.github.aakira.napier.DebugAntilog\r\nimport io.github.aakira.napier.Napier\r\nimport org.koin.android.ext.koin.androidContext\r\nimport org.koin.core.context.startKoin\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.convertToString\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy.*\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.di.repositoryModule\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.di.viewModelModule\r\n\r\n/**\r\n * Declares DI container.\r\n */\r\nclass App : Application() {\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n\r\n        startKoin {\r\n            androidContext(this@App)\r\n            modules(\r\n                listOf(\r\n                    repositoryModule,\r\n                    viewModelModule\r\n                )\r\n            )\r\n        }\r\n\r\n        Napier.base(DebugAntilog())\r\n\r\n        YandexMetrica.activate(\r\n            applicationContext,\r\n            YandexMetricaConfig\r\n                .newConfigBuilder(\"cfc4505a-fc5f-499d-abe1-e571d77f9d52\")\r\n                .build()\r\n        )\r\n        YandexMetrica.enableActivityAutoTracking(this)\r\n\r\n        convertToString = { toString(this@App) }\r\n\r\n//        val fullDbDriver = DatabaseDriverFactory(this).getDriver(FullDb.Schema, \"fullDb.sqlite3\")\r\n//        val localDbDriver =\r\n//            DatabaseDriverFactory(this).createDriver(LocalDb.Schema, \"localDb.sqlite3\")\r\n//\r\n//        sLocationRepository = LocationRepository(\r\n//            // TODO change to network implementation, issue #1\r\n//            mainSource = LocationDataSourceFullDb(fullDbDriver),\r\n//            reserveSource = LocationDb(localDbDriver),\r\n//            strategy = DIRECT_READ\r\n//        )\r\n//\r\n//        sRouteRepository = RouteRepository(\r\n//            // TODO change to network implementation, issue #1\r\n//            mainSource = RouteDataSourceFullDb(fullDbDriver),\r\n//            reserveSource = RouteDb(localDbDriver),\r\n//            strategy = DIRECT_READ // TODO change to BACKUP, issue #1 (first solve issue #10)\r\n//        )\r\n    }\r\n//\r\n//    /**\r\n//     * Access point to initiated repositories.\r\n//     *\r\n//     * @property sLocationRepository Read-only storage of available locations.\r\n//     * @property sRouteRepository Read-only storage of available routes.\r\n//     */\r\n//    companion object {\r\n//        lateinit var sLocationRepository: LocationRepository\r\n//        lateinit var sRouteRepository: RouteRepository\r\n//    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/App.kt b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/App.kt
--- a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/App.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/App.kt	(date 1682764620578)
@@ -7,11 +7,11 @@
 import io.github.aakira.napier.Napier
 import org.koin.android.ext.koin.androidContext
 import org.koin.core.context.startKoin
-import ru.z8.louttsev.bustrainflightmobile.shared.convertToString
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.convertToString
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RepositoryStrategy.*
 
-import ru.z8.louttsev.bustrainflightmobile.shared.di.repositoryModule
-import ru.z8.louttsev.bustrainflightmobile.shared.di.viewModelModule
+import ru.z8.louttsev.bustrainflightmobile.androidApp.di.repositoryModule
+import ru.z8.louttsev.bustrainflightmobile.androidApp.di.viewModelModule
 
 /**
  * Declares DI container.
Index: androidApp/src/main/res/layout/item_path.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <data>\r\n\r\n        <import type=\"ru.z8.louttsev.bustrainflightmobile.shared.model.data.DurationConverter\" />\r\n\r\n        <variable\r\n            name=\"model\"\r\n            type=\"ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path\" />\r\n\r\n    </data>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/path_main_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:paddingStart=\"7dp\"\r\n        android:paddingTop=\"8dp\"\r\n        android:paddingEnd=\"7dp\"\r\n        android:paddingBottom=\"8dp\">\r\n\r\n        <View\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"1dp\"\r\n            android:background=\"@color/lightGray\"/>\r\n\r\n        <TextView\r\n            android:id=\"@+id/path_plan\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_marginTop=\"10dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            android:text=\"@{model.pathPlan}\"\r\n            android:textColor=\"@color/colorTextPrimary\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/transport\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            tools:text=\"Muscat → Abu Dhabi\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/transport\"\r\n            android:layout_marginTop=\"10dp\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@{model.transportationType.toString()}\"\r\n            android:textColor=\"@color/colorTextPrimary\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            tools:text=\"Bus\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/duration\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@{model.pathDuration}\"\r\n            android:textColor=\"@android:color/black\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/euro_price\"\r\n            tools:text=\"1 d 16 h 39 min\" />\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/bookingButton\"\r\n            style=\"@style/ActionButtonStyle\"\r\n            app:layout_constraintBottom_toBottomOf=\"@+id/buyTicketButton\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/buyTicketButton\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/buyTicketButton\"\r\n            android:layout_marginEnd=\"6dp\"\r\n            android:text=\"Booking.com\"/>\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/buyTicketButton\"\r\n            style=\"@style/ActionButtonStyle\"\r\n            android:text=\"@string/action_button_text\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_marginTop=\"12dp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/duration\"\r\n            tools:visibility=\"visible\"\r\n            android:textStyle=\"bold\"/>\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/hostelworldButton\"\r\n            style=\"@style/ActionButtonStyle\"\r\n            app:layout_constraintBottom_toBottomOf=\"@+id/buyTicketButton\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/buyTicketButton\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/buyTicketButton\"\r\n            android:layout_marginStart=\"6dp\"\r\n            android:text=\"Hostelworld\"/>\r\n\r\n        <TextView\r\n            android:id=\"@+id/euro_price\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:textColor=\"@android:color/black\"\r\n            android:text=\"@{String.valueOf(model.euroPrice) + `\\u2009€`}\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/path_plan\"\r\n            tools:text=\"125.30 €\" />\r\n\r\n<!--        <TextView-->\r\n<!--            android:id=\"@+id/conditional_clause\"-->\r\n<!--            android:layout_width=\"0dp\"-->\r\n<!--            android:layout_height=\"wrap_content\"-->\r\n<!--            android:layout_marginTop=\"8dp\"-->\r\n<!--            android:paddingTop=\"2dp\"-->\r\n<!--            android:paddingBottom=\"2dp\"-->\r\n<!--            android:text=\"\"-->\r\n<!--            android:textAlignment=\"center\"-->\r\n<!--            android:textColor=\"@color/colorTextPrimary\"-->\r\n<!--            android:visibility=\"gone\"-->\r\n<!--            app:layout_constraintEnd_toEndOf=\"@id/euro_price\"-->\r\n<!--            app:layout_constraintStart_toStartOf=\"@id/duration\"-->\r\n<!--            app:layout_constraintTop_toBottomOf=\"@id/euro_price\"-->\r\n<!--            tools:text=\"duration includes transfer to/from airport\"-->\r\n<!--            tools:visibility=\"visible\" />-->\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</layout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/res/layout/item_path.xml b/androidApp/src/main/res/layout/item_path.xml
--- a/androidApp/src/main/res/layout/item_path.xml	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/res/layout/item_path.xml	(date 1682764620319)
@@ -5,11 +5,11 @@
 
     <data>
 
-        <import type="ru.z8.louttsev.bustrainflightmobile.shared.model.data.DurationConverter" />
+        <import type="ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.DurationConverter" />
 
         <variable
             name="model"
-            type="ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path" />
+            type="ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Path" />
 
     </data>
 
Index: androidApp/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <data>\r\n\r\n        <variable\r\n            name=\"viewModel\"\r\n            type=\"ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel\" />\r\n </data>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/main_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/colorBackground\"\r\n        tools:context=\".MainActivity\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/textView\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/from_location_input_field_hint\"\r\n            app:layout_constraintBottom_toTopOf=\"@id/origin_input_layout\"\r\n            app:layout_constraintStart_toStartOf=\"@id/origin_input_layout\" />\r\n\r\n        <com.google.android.material.textfield.TextInputLayout\r\n            android:id=\"@+id/origin_input_layout\"\r\n            style=\"@style/InputLocationLayoutStyle\"\r\n            android:layout_marginTop=\"38dp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n            <AutoCompleteTextView\r\n                android:id=\"@+id/origin_text_view\"\r\n                style=\"@style/InputLocationEditTextStyle\"\r\n                tools:text=\"Muscat\" />\r\n\r\n        </com.google.android.material.textfield.TextInputLayout>\r\n\r\n        <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/to_location_input_field_hint\"\r\n            app:layout_constraintBottom_toTopOf=\"@id/destination_input_layout\"\r\n            app:layout_constraintStart_toStartOf=\"@id/destination_input_layout\" />\r\n\r\n        <com.google.android.material.textfield.TextInputLayout\r\n            android:id=\"@+id/destination_input_layout\"\r\n            style=\"@style/InputLocationLayoutStyle\"\r\n            android:layout_marginTop=\"8dp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@id/origin_input_layout\">\r\n\r\n            <AutoCompleteTextView\r\n                android:id=\"@+id/destination_text_view\"\r\n                style=\"@style/InputLocationEditTextStyle\"\r\n                tools:text=\"Abu Dhabi\" />\r\n\r\n        </com.google.android.material.textfield.TextInputLayout>\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/clearButton\"\r\n            android:layout_width=\"120dp\"\r\n            android:layout_height=\"45dp\"\r\n            android:layout_marginStart=\"8dp\"\r\n            android:layout_marginEnd=\"16dp\"\r\n            android:background=\"@drawable/white_button_background\"\r\n            app:backgroundTint=\"@null\"\r\n            app:cornerRadius=\"8dp\"\r\n            android:fontFamily=\"@font/roboto\"\r\n            android:text=\"@string/clear_button_text\"\r\n            android:textAllCaps=\"false\"\r\n            android:textColor=\"@android:color/black\"\r\n            android:textSize=\"15sp\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/goButton\"\r\n            app:layout_constraintHorizontal_bias=\"0.5\"\r\n            app:layout_constraintHorizontal_chainStyle=\"packed\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/destination_input_layout\" />\r\n\r\n        <com.google.android.material.button.MaterialButton\r\n            android:id=\"@+id/goButton\"\r\n            android:layout_width=\"120dp\"\r\n            android:layout_height=\"45dp\"\r\n            android:layout_marginStart=\"16dp\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            app:backgroundTint=\"@null\"\r\n            android:background=\"@drawable/orange_button_background\"\r\n            android:focusable=\"true\"\r\n            android:focusableInTouchMode=\"true\"\r\n            android:fontFamily=\"@font/roboto\"\r\n            android:text=\"@string/go_button_text\"\r\n            android:textAllCaps=\"false\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textSize=\"15sp\"\r\n            android:textStyle=\"bold\"\r\n            app:cornerRadius=\"8dp\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintHorizontal_bias=\"0.5\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/clearButton\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/destination_input_layout\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/resultsTextView\"\r\n            android:layout_width=\"80dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"10dp\"\r\n            android:layout_marginTop=\"15dp\"\r\n            android:text=\"Results\"\r\n            android:textColor=\"@color/colorPrimary\"\r\n            android:textSize=\"20sp\"\r\n            android:visibility=\"invisible\"\r\n            android:textStyle=\"italic|bold\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/clearButton\"/>\r\n        <!--        <ImageView-->\r\n        <!--            android:id=\"@+id/logo\"-->\r\n        <!--            android:layout_width=\"0dp\"-->\r\n        <!--            android:layout_height=\"0dp\"-->\r\n        <!--            android:layout_marginStart=\"16dp\"-->\r\n        <!--            android:layout_marginTop=\"16dp\"-->\r\n        <!--            android:layout_marginEnd=\"16dp\"-->\r\n        <!--            android:layout_marginBottom=\"16dp\"-->\r\n        <!--            app:layout_constraintBottom_toBottomOf=\"parent\"-->\r\n        <!--            app:layout_constraintDimensionRatio=\"1\"-->\r\n        <!--            app:layout_constraintEnd_toEndOf=\"parent\"-->\r\n        <!--            app:layout_constraintStart_toStartOf=\"parent\"-->\r\n        <!--            app:layout_constraintTop_toBottomOf=\"@+id/clear_button\"-->\r\n        <!--            app:srcCompat=\"@drawable/logo\" />-->\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/route_list\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_marginStart=\"10dp\"\r\n            android:layout_marginTop=\"50dp\"\r\n            android:layout_marginEnd=\"15dp\"\r\n            android:layout_marginBottom=\"8dp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/clearButton\"\r\n            tools:listitem=\"@layout/item_route\" />\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/res/layout/activity_main.xml b/androidApp/src/main/res/layout/activity_main.xml
--- a/androidApp/src/main/res/layout/activity_main.xml	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/res/layout/activity_main.xml	(date 1682764620172)
@@ -7,7 +7,7 @@
 
         <variable
             name="viewModel"
-            type="ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel" />
+            type="ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel.MainViewModel" />
  </data>
 
     <androidx.constraintlayout.widget.ConstraintLayout
Index: androidApp/src/main/res/layout/item_route.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <data>\r\n\r\n        <import type=\"ru.z8.louttsev.bustrainflightmobile.shared.model.data.DurationConverter\" />\r\n\r\n        <variable\r\n            name=\"model\"\r\n            type=\"ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\" />\r\n    </data>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/route_main_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"@drawable/route_item_background\">\r\n\r\n        <HorizontalScrollView\r\n            android:id=\"@+id/transport_icon_container_scroll\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:fadeScrollbars=\"false\"\r\n            android:scrollIndicators=\"start|end\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            tools:layout_height=\"36dp\"\r\n            android:padding=\"7dp\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/transport_icon_container\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\" />\r\n        </HorizontalScrollView>\r\n\r\n        <TextView\r\n            android:id=\"@+id/route_plan\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"8dp\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            android:text=\"@{model.routePlan}\"\r\n            android:textColor=\"@color/colorTextPrimary\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/open_indicator\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@id/transport_icon_container_scroll\"\r\n            tools:text=\"Muscat → Abu Dhabi\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/duration\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_marginStart=\"8dp\"\r\n            android:text=\"@{model.routeDuration}\"\r\n            android:gravity=\"center\"\r\n            android:fontFamily=\"@font/rubik_medium\"\r\n            android:textColor=\"@android:color/black\"\r\n            app:layout_constraintBottom_toBottomOf=\"@+id/euro_price\"\r\n            app:layout_constraintTop_toTopOf=\"@id/euro_price\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/euro_price\"\r\n            tools:text=\"1 d 16 h 39 min\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/euro_price\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"10dp\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            android:paddingVertical=\"5dp\"\r\n            android:paddingHorizontal=\"10dp\"\r\n            android:background=\"@drawable/price_background\"\r\n            android:text=\"@{`€\\u2009` + String.valueOf(model.euroPrice) + '0'}\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textStyle=\"bold\"\r\n            android:textSize=\"15sp\"\r\n            app:layout_constraintTop_toBottomOf=\"@id/route_plan\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            tools:text=\"€ 125.30\" />\r\n\r\n        <CheckBox\r\n            android:id=\"@+id/open_indicator\"\r\n            android:layout_width=\"40dp\"\r\n            android:layout_height=\"40dp\"\r\n            android:button=\"@drawable/route_item_opening_selector\"\r\n            app:layout_constraintBottom_toBottomOf=\"@+id/route_plan\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/route_plan\" />\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/path_list\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"gone\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@id/euro_price\"\r\n            tools:visibility=\"visible\"\r\n            tools:listitem=\"@layout/item_path\"/>\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</layout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/res/layout/item_route.xml b/androidApp/src/main/res/layout/item_route.xml
--- a/androidApp/src/main/res/layout/item_route.xml	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/res/layout/item_route.xml	(date 1682764620109)
@@ -5,11 +5,11 @@
 
     <data>
 
-        <import type="ru.z8.louttsev.bustrainflightmobile.shared.model.data.DurationConverter" />
+        <import type="ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.DurationConverter" />
 
         <variable
             name="model"
-            type="ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route" />
+            type="ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route" />
     </data>
 
     <androidx.constraintlayout.widget.ConstraintLayout
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/GoButtonHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.viewmodel\r\n\r\nimport dev.icerock.moko.mvvm.livedata.LiveData\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\n\r\n/**\r\n * Determines UI actions handle logic and data for build routes button.\r\n *\r\n * @property data Items list\r\n * @property isReadyToBuild Correct state indicator\r\n */\r\ninterface GoButtonHandler {\r\n    val data: LiveData<List<Route>>\r\n    val isReadyToBuild: LiveData<Boolean>\r\n\r\n    /**\r\n     * Finds possible routes between the specified points of origin and destination.\r\n     *\r\n     * @param emptyResultHandler UI function called if no possible routes found\r\n     */\r\n    fun build(emptyResultHandler: () -> Unit, onUpdate: () -> Unit)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/GoButtonHandler.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/GoButtonHandler.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/GoButtonHandler.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/GoButtonHandler.kt	(date 1682764620648)
@@ -2,10 +2,10 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.viewmodel
+package ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel
 
 import dev.icerock.moko.mvvm.livedata.LiveData
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
 
 /**
  * Determines UI actions handle logic and data for build routes button.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/MainViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.viewmodel\r\n\r\nimport dev.icerock.moko.mvvm.livedata.LiveData\r\nimport dev.icerock.moko.mvvm.livedata.MutableLiveData\r\nimport dev.icerock.moko.mvvm.viewmodel.ViewModel\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport org.koin.core.component.KoinComponent\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.currentLocale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.ioDispatcher\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.LocationsRepositoryJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RoutesRepositoryJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.uiDispatcher\r\n\r\n\r\n/**\r\n * Declares UX logic for managing the data and handling the UI actions.\r\n *\r\n * @param locationRepository Read-only storage of available locations\r\n * @param routeRepository Read-only storage of available routes\r\n * @property origins Available origin locations\r\n * @property destinations Available destination locations\r\n * @property routes Found routes\r\n */\r\nclass MainViewModel(\r\n    private val locationRepository: LocationsRepositoryJson,\r\n    private val routeRepository: RoutesRepositoryJson\r\n) : ViewModel(), KoinComponent {\r\n    private var inputLocale = currentLocale\r\n\r\n    private var selectedOrigin: Location? = null\r\n    private var selectedDestination: Location? = null\r\n\r\n    private val routeBuildReadiness = MutableLiveData(isBothPointsSelected() && isPointsVarious())\r\n\r\n    val origins = object : AutoCompleteHandler<Location> {\r\n        private val locations = MutableLiveData<List<Location>>(emptyList())\r\n        override val data: LiveData<List<Location>>\r\n            get() = locations\r\n\r\n        override var isBeingUpdated: Boolean = false\r\n        override var isBeingBackspaced: Boolean = false\r\n        override var wasSelected: Boolean = false\r\n\r\n        override fun onTextChanged(text: String, locale: Locale, emptyResultHandler: () -> Unit) {\r\n            inputLocale = locale\r\n            viewModelScope.launch(ioDispatcher) {\r\n\r\n                val result = locationRepository.searchLocationsByName(\r\n                    needle = text,\r\n                    type = Type.FROM,\r\n                    limit = 4,\r\n                    locale = inputLocale\r\n                )\r\n\r\n\r\n                withContext(uiDispatcher) {\r\n                    if (result.isEmpty()) {\r\n                        emptyResultHandler()\r\n                    } else {\r\n                        locations.value = result\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onItemSelected(item: Location, invalidSelectionHandler: () -> Unit) {\r\n            selectedOrigin = item\r\n            updateReadiness()\r\n            if (!isPointsVarious()) {\r\n                invalidSelectionHandler()\r\n            }\r\n        }\r\n\r\n        override fun onItemReset() {\r\n            selectedOrigin = null\r\n            updateReadiness()\r\n        }\r\n\r\n        override fun isItemSelected(): Boolean = selectedOrigin != null\r\n    }\r\n\r\n    val destinations = object : AutoCompleteHandler<Location> {\r\n        private val locations = MutableLiveData<List<Location>>(emptyList())\r\n        override val data: LiveData<List<Location>>\r\n            get() = locations\r\n\r\n        override var isBeingUpdated: Boolean = false\r\n        override var isBeingBackspaced: Boolean = false\r\n        override var wasSelected: Boolean = false\r\n\r\n        override fun onTextChanged(text: String, locale: Locale, emptyResultHandler: () -> Unit) {\r\n            inputLocale = locale\r\n            viewModelScope.launch(ioDispatcher) {\r\n\r\n                val result = locationRepository.searchLocationsByName(\r\n                    needle = text,\r\n                    type = Type.TO,\r\n                    limit = 4,\r\n                    locale = inputLocale\r\n                )\r\n\r\n                withContext(uiDispatcher) {\r\n                    if (result.isEmpty()) {\r\n                        emptyResultHandler()\r\n                    } else {\r\n                        locations.value = result\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onItemSelected(item: Location, invalidSelectionHandler: () -> Unit) {\r\n            selectedDestination = item\r\n            updateReadiness()\r\n            if (!isPointsVarious()) {\r\n                invalidSelectionHandler()\r\n            }\r\n        }\r\n\r\n        override fun onItemReset() {\r\n            selectedDestination = null\r\n            updateReadiness()\r\n        }\r\n\r\n        override fun isItemSelected(): Boolean = selectedDestination != null\r\n    }\r\n\r\n    val routes = object : GoButtonHandler {\r\n        private val routes = MutableLiveData<List<Route>>(emptyList())\r\n        override val data: LiveData<List<Route>>\r\n            get() = routes\r\n\r\n        override val isReadyToBuild: LiveData<Boolean>\r\n            get() = routeBuildReadiness\r\n\r\n        override fun build(emptyResultHandler: () -> Unit, onUpdate: () -> Unit) {\r\n\r\n            if (isBothPointsSelected()) {\r\n                viewModelScope.launch(ioDispatcher) {\r\n                    // null-safety was checked\r\n//                    val result = oldRouteRepository.getRoutes(\r\n//                        from = selectedOrigin!!,\r\n//                        to = selectedDestination!!,\r\n//                        locale = inputLocale\r\n//                    )\r\n\r\n                    val result = routeRepository.getRoutes(\r\n                        from = selectedOrigin!!,\r\n                        to = selectedDestination!!,\r\n                        locale = inputLocale\r\n                    )\r\n\r\n                    withContext(uiDispatcher) {\r\n                        if (result.isEmpty()) {\r\n                            emptyResultHandler()\r\n                        } else {\r\n                            routes.value = result\r\n                            delay(100)\r\n                            onUpdate()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun updateReadiness() {\r\n        routeBuildReadiness.value = isBothPointsSelected() && isPointsVarious()\r\n    }\r\n\r\n    private fun isBothPointsSelected() =\r\n        selectedOrigin != null && selectedDestination != null\r\n\r\n    private fun isPointsVarious() =\r\n        selectedOrigin != selectedDestination\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/MainViewModel.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/MainViewModel.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/MainViewModel.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/MainViewModel.kt	(date 1682764620121)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.viewmodel
+package ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel
 
 import dev.icerock.moko.mvvm.livedata.LiveData
 import dev.icerock.moko.mvvm.livedata.MutableLiveData
@@ -11,15 +11,15 @@
 import kotlinx.coroutines.launch
 import kotlinx.coroutines.withContext
 import org.koin.core.component.KoinComponent
-import ru.z8.louttsev.bustrainflightmobile.shared.currentLocale
-import ru.z8.louttsev.bustrainflightmobile.shared.ioDispatcher
-import ru.z8.louttsev.bustrainflightmobile.shared.model.LocationsRepositoryJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RoutesRepositoryJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
-import ru.z8.louttsev.bustrainflightmobile.shared.uiDispatcher
+import ru.z8.louttsev.bustrainflightmobile.androidApp.currentLocale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.ioDispatcher
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.LocationsRepositoryJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RoutesRepositoryJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location.Type
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.uiDispatcher
 
 
 /**
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/AutoCompleteHandler.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.viewmodel\r\n\r\nimport dev.icerock.moko.mvvm.livedata.LiveData\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\n\r\n/**\r\n * Determines UI actions handle logic and data for autocomplete input field.\r\n *\r\n * @property data Items list\r\n * @property isBeingUpdated Model update indicator\r\n */\r\ninterface AutoCompleteHandler<T> {\r\n    val data: LiveData<List<T>>\r\n    var isBeingUpdated: Boolean\r\n    var isBeingBackspaced: Boolean\r\n    var wasSelected: Boolean\r\n\r\n    /**\r\n     * Updates data accordingly search pattern.\r\n     *\r\n     * @param text Typed part of autocomplete input field\r\n     */\r\n    fun onTextChanged(text: String, locale: Locale, emptyResultHandler: () -> Unit)\r\n\r\n    /**\r\n     * Sets selected item.\r\n     *\r\n     * @param item Selected item into autocomplete input field\r\n     */\r\n    fun onItemSelected(item: T, invalidSelectionHandler: () -> Unit)\r\n\r\n    /**\r\n     * Resets the previously selected item.\r\n     */\r\n    fun onItemReset()\r\n\r\n    /**\r\n     * Checks item selection.\r\n     *\r\n     * @return true if item was selected earlier\r\n     */\r\n    fun isItemSelected(): Boolean\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/AutoCompleteHandler.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/AutoCompleteHandler.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/AutoCompleteHandler.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/viewmodel/AutoCompleteHandler.kt	(date 1682764620225)
@@ -2,10 +2,10 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.viewmodel
+package ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel
 
 import dev.icerock.moko.mvvm.livedata.LiveData
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
 
 /**
  * Determines UI actions handle logic and data for autocomplete input field.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RoutesRepositoryJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\nimport io.github.aakira.napier.Napier\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.currentLocale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.RoutesDbJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.*\r\n\r\nclass RoutesRepositoryJson(val db: RoutesDbJson, val locationRepository: LocationsRepositoryJson) {\r\n\r\n    private val directRoutes = db.getDirectRoutes()\r\n\r\n    private val fixedRoutes = db.getFixedRoutes()\r\n\r\n    private val flyingRoutes = db.getFlyingRoutes()\r\n\r\n    private val mixedRoutes = db.getMixedRoutes()\r\n\r\n    private val transport = db.getTransport()\r\n\r\n    fun getRoutes(\r\n        from: Location,\r\n        to: Location,\r\n        locale: Locale = currentLocale\r\n    ): List<Route> {\r\n        val routeList = mutableListOf<Route>()\r\n\r\n        val addedPath = mutableListOf(listOf<Int>())\r\n\r\n        for (route in fixedRoutes.values){\r\n            if (route.from == from.id && route.to == to.id){\r\n                Napier.d(\"Fixed route: $route\")\r\n                if (route.directRoutes.size == 1)\r\n                    break\r\n                addedPath.add(route.directRoutes)\r\n                val pathList = mutableListOf<Path>()\r\n                for (path in route.directRoutes){\r\n                    pathList.add(Path(\r\n                        transportationType = (TransportationType fromValue transport[directRoutes[path]?.transport]?.name),\r\n                        euroPrice = directRoutes[path]?.price!!.toFloat(),\r\n                        durationMinutes = directRoutes[path]?.duration!!,\r\n                        from = locationRepository.searchLocationById(directRoutes[path]!!.from)!!.name,\r\n                        to = locationRepository.searchLocationById(directRoutes[path]!!.to)!!.name\r\n                    ))\r\n                }\r\n                routeList.add(\r\n                    Route(\r\n                        routeType = Route.Type.FIXED_WITHOUT_RIDE_SHARE,\r\n                        euroPrice = route.price.toFloat(),\r\n                        durationMinutes = route.duration,\r\n                        directPaths = pathList\r\n                ))\r\n            }\r\n        }\r\n\r\n        for (route in flyingRoutes.values){\r\n            if (route.from == from.id && route.to == to.id){\r\n                Napier.d(\"Fling route: $route\")\r\n                if (route.directRoutes.size == 1)\r\n                    break\r\n                addedPath.add(route.directRoutes)\r\n                val pathList = mutableListOf<Path>()\r\n                for (path in route.directRoutes){\r\n                    pathList.add(Path(\r\n                        transportationType = (TransportationType fromValue transport[directRoutes[path]?.transport]?.name),\r\n                        euroPrice = directRoutes[path]?.price!!.toFloat(),\r\n                        durationMinutes = directRoutes[path]?.duration!!,\r\n                        from = locationRepository.searchLocationById(directRoutes[path]!!.from)!!.name,\r\n                        to = locationRepository.searchLocationById(directRoutes[path]!!.to)!!.name\r\n                    ))\r\n                }\r\n                routeList.add(\r\n                    Route(\r\n                        routeType = Route.Type.FLYING,\r\n                        euroPrice = route.price.toFloat(),\r\n                        durationMinutes = route.duration,\r\n                        directPaths = pathList\r\n                    ))\r\n            }\r\n        }\r\n\r\n        for (route in directRoutes.values) {\r\n            if (route.from == from.id && route.to == to.id) {\r\n                addedPath.add(listOf(directRoutes.entries.find { it.value == route }!!.key))\r\n                Napier.d(\"Direct route: $route\")\r\n                routeList.add(\r\n                    Route(\r\n                        routeType = Route.Type.DIRECT,\r\n                        euroPrice = route.price.toFloat(),\r\n                        durationMinutes = route.duration,\r\n                        directPaths = listOf(Path(\r\n                            transportationType = (TransportationType fromValue transport[route.transport]?.name),\r\n                            euroPrice = route.price.toFloat(),\r\n                            durationMinutes = route.duration,\r\n                            from = from.name,\r\n                            to = to.name\r\n                        ))\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        for (route in mixedRoutes.values){\r\n            if (route.from == from.id && route.to == to.id){\r\n                Napier.d(\"Mixed routes: $route\")\r\n                if (addedPath.contains(route.directRoutes))\r\n                    continue\r\n                val pathList = mutableListOf<Path>()\r\n                for (path in route.directRoutes){\r\n                    pathList.add(Path(\r\n                        transportationType = (TransportationType fromValue transport[directRoutes[path]?.transport]?.name),\r\n                        euroPrice = directRoutes[path]?.price!!.toFloat(),\r\n                        durationMinutes = directRoutes[path]?.duration!!,\r\n                        from = locationRepository.searchLocationById(directRoutes[path]!!.from)!!.name,\r\n                        to = locationRepository.searchLocationById(directRoutes[path]!!.to)!!.name\r\n                    ))\r\n                }\r\n                routeList.add(\r\n                    Route(\r\n                        routeType = Route.Type.MIXED,\r\n                        euroPrice = route.price.toFloat(),\r\n                        durationMinutes = route.duration,\r\n                        directPaths = pathList\r\n                    ))\r\n            }\r\n        }\r\n\r\n        return routeList.sortedBy { it.euroPrice }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RoutesRepositoryJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RoutesRepositoryJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RoutesRepositoryJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RoutesRepositoryJson.kt	(date 1682764620036)
@@ -1,9 +1,9 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
 import io.github.aakira.napier.Napier
-import ru.z8.louttsev.bustrainflightmobile.shared.currentLocale
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.RoutesDbJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.currentLocale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.RoutesDbJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.*
 
 class RoutesRepositoryJson(val db: RoutesDbJson, val locationRepository: LocationsRepositoryJson) {
 
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/payload/AffiliateProgram.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\n@file:Suppress(\"unused\")\r\n\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.payload\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Country\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Country.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType.*\r\n\r\n/**\r\n * Declares available affiliate programs.\r\n *\r\n * @param applicableCountries Set of countries where program is applicable, empty = everywhere\r\n * @param applicableLocations Set of locations where program is applicable, empty = everywhere\r\n * @param affiliateUrls Map of affiliate URLs associated to transport type\r\n */\r\nenum class AffiliateProgram(\r\n    private val applicableCountries: Set<Country>,\r\n    private val applicableLocations: Set<Location>,\r\n    private val affiliateUrls: Map<TransportationType, String>\r\n) {\r\n    // TODO: implement new item for transferbuses.com affiliate program, issue #40\r\n    // TODO: Eliminate conflicts with other items that have BUS as affiliateUrls key, isuue #40\r\n\r\n//    TUTU(\r\n//        applicableCountries = setOf(RUSSIA, BELARUS, UKRAINE),\r\n//        applicableLocations = emptySet(),\r\n//        affiliateUrls = mapOf(\r\n//            BUS to \"https://bus.tutu.ru/\",\r\n//            TRAIN to \"https://www.tutu.ru/poezda/\"\r\n//        )\r\n//    ),\r\n//    MAKEMYTRIP(\r\n//        applicableCountries = setOf(INDIA),\r\n//        applicableLocations = emptySet(),\r\n//        affiliateUrls = mapOf(\r\n//            BUS to \"https://www.makemytrip.com/bus-tickets/\",\r\n//            TRAIN to \"https://www.makemytrip.com/railways/\"\r\n//        )\r\n//    ),\r\n    OMIO(\r\n        applicableCountries = emptySet(),\r\n        applicableLocations = emptySet(),\r\n        affiliateUrls = mapOf(\r\n            BUS to \"https://omio.sjv.io/XxEWmb\",\r\n            TRAIN to \"https://omio.sjv.io/XxEWmb\",\r\n            FLIGHT to \"https://omio.sjv.io/XxEWmb\"\r\n        )\r\n    ),\r\n    AFERRY(\r\n        applicableCountries = emptySet(),\r\n        applicableLocations = emptySet(),\r\n        affiliateUrls = mapOf(\r\n            FERRY to \"https://www.aferry.com/\"\r\n        )\r\n    ),\r\n    BLABLACAR(\r\n        applicableCountries = emptySet(),\r\n        applicableLocations = emptySet(),\r\n        affiliateUrls = mapOf(\r\n            RIDE_SHARE to \"https://www.blablacar.com/\"\r\n        )\r\n    );\r\n\r\n    companion object {\r\n        /**\r\n         * Chooses URL of a suitable in relation to the specified path affiliate program.\r\n         *\r\n         * @param path Specified section of the route\r\n         * @return Suitable payload URL or empty\r\n         */\r\n        fun getAffiliateUrl(path: Path, country: Country): String =\r\n            try {\r\n                @Suppress(\"SimplifiableCallChain\")\r\n                values()\r\n                    .filter {\r\n                        it.affiliateUrls.containsKey(path.transportationType)\r\n                    }\r\n                    .filter {\r\n                        it.applicableCountries.isEmpty() || it.applicableCountries.contains(country)\r\n                    }\r\n                    .filter {\r\n                        it.applicableLocations.isEmpty() || path.relate(it.applicableLocations)\r\n                    }\r\n                    .first() // can throw NoSuchElementException if empty filter result\r\n                    .affiliateUrls[path.transportationType]!! // checked by first filter\r\n            } catch (cause: NoSuchElementException) {\r\n                \"\" // suitable program not found\r\n            }\r\n\r\n        private fun Path.relate(locations: Set<Location>): Boolean {\r\n            locations.forEach {\r\n                if (this.from == it.name || this.to == it.name) return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/payload/AffiliateProgram.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/payload/AffiliateProgram.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/payload/AffiliateProgram.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/payload/AffiliateProgram.kt	(date 1682764620603)
@@ -4,14 +4,14 @@
  */
 @file:Suppress("unused")
 
-package ru.z8.louttsev.bustrainflightmobile.shared.payload
+package ru.z8.louttsev.bustrainflightmobile.androidApp.payload
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Country
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Country.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Country
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Country.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Path
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.TransportationType
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.TransportationType.*
 
 /**
  * Declares available affiliate programs.
Index: shared/src/commonTest/kotlin/model/RepositoryStrategyTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataStorage\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy.*\r\nimport kotlin.test.Test\r\nimport kotlin.test.assertEquals\r\nimport kotlin.test.assertTrue\r\nimport kotlin.test.fail\r\n\r\nclass RepositoryStrategyTest {\r\n    private val dataSourceFake = object : DataSource<String> {\r\n        var isAvailable: Boolean = true\r\n\r\n        override fun get(parameters: ParamsBundle): List<String>? {\r\n            if (!isAvailable) {\r\n                return null\r\n            }\r\n            val needle = parameters.get(Key.NEEDLE).toString()\r\n\r\n            return if (needle.isEmpty() || needle.isBlank()) {\r\n                emptyList()\r\n            } else {\r\n                listOf(\r\n                    \"$needle-started-string\"\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private val dataStorageFake = object : DataStorage<String> {\r\n        val storage = emptyMap<String, String>().toMutableMap()\r\n\r\n        override fun put(data: List<String>, parameters: ParamsBundle) {\r\n            data.forEach { storage[it] = it }\r\n        }\r\n\r\n        override fun get(parameters: ParamsBundle): List<String> {\r\n            val needle = parameters.get(Key.NEEDLE).toString()\r\n            return if (needle.isEmpty() || needle.isBlank()) {\r\n                emptyList()\r\n            } else {\r\n                storage.filterKeys { it.contains(needle) }.values.toList()\r\n            }\r\n        }\r\n    }\r\n\r\n    private val loadersUnderTest =\r\n        emptyList<Pair<RepositoryStrategy, (ParamsBundle) -> List<String>>>()\r\n            .toMutableList()\r\n            .also {\r\n                values().forEach { strategy ->\r\n                    it.add(\r\n                        strategy to strategy.combineLoaderFrom(\r\n                            dataSourceFake,\r\n                            dataStorageFake\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n            .toList()\r\n\r\n    @Test\r\n    fun loaderTest() {\r\n        loadersUnderTest.forEach {\r\n            val (strategy, loader) = it\r\n            when (strategy) {\r\n                BACKUP -> {\r\n                    assertTrue(dataSourceFake.isAvailable)\r\n                    val params = ParamsBundle().apply { put(Key.NEEDLE, \"Mos\") }\r\n                    val result = loader(params)\r\n                    assertEquals(result, dataStorageFake.storage.values.toList())\r\n                    dataSourceFake.isAvailable = false\r\n                    val cachedResult = loader(params)\r\n                    assertEquals(result, cachedResult)\r\n                }\r\n                CACHING -> {\r\n                    val params = ParamsBundle().apply { put(Key.NEEDLE, \"Mos\") }\r\n                    val result = loader(params)\r\n                    assertEquals(result, dataStorageFake.storage.values.toList())\r\n                    val cachedResult = loader(params)\r\n                    assertEquals(result, cachedResult)\r\n                }\r\n                else -> fail(\"Uncovered case: ${strategy.name}\")\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonTest/kotlin/model/RepositoryStrategyTest.kt b/shared/src/commonTest/kotlin/model/RepositoryStrategyTest.kt
--- a/shared/src/commonTest/kotlin/model/RepositoryStrategyTest.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonTest/kotlin/model/RepositoryStrategyTest.kt	(date 1682764619511)
@@ -1,11 +1,11 @@
 package model
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataStorage
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataStorage
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RepositoryStrategy
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RepositoryStrategy.*
 import kotlin.test.Test
 import kotlin.test.assertEquals
 import kotlin.test.assertTrue
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RepositoryStrategy.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\n\r\n/**\r\n * Declares data sources usage logic.\r\n */\r\nenum class RepositoryStrategy {\r\n    /**\r\n     * Strategy implementation that receives data from main (read-only) source if it is available,\r\n     * and saves result to reserve (full access) storage. When main source isn't available,\r\n     * data will be received from reserve source.\r\n     */\r\n    BACKUP {\r\n        override fun <T> combineLoaderFrom(\r\n            dataSource: DataSource<T>,\r\n            dataStorage: DataStorage<T>\r\n        ): (ParamsBundle) -> List<T> = { params: ParamsBundle ->\r\n            val result = dataSource.get(params)\r\n            result?.also {\r\n                dataStorage.put(result, params)\r\n            } ?: dataStorage.get(params)\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strategy implementation that receives data from reserve (cache) source first. If result\r\n     * is empty, data will be received from main (read-only) source and cached to reserve (full\r\n     * access) storage.\r\n     */\r\n    CACHING {\r\n        override fun <T> combineLoaderFrom(\r\n            dataSource: DataSource<T>,\r\n            dataStorage: DataStorage<T>\r\n        ): (ParamsBundle) -> List<T> = { params: ParamsBundle ->\r\n            val cachedResult = dataStorage.get(params)\r\n\r\n            if (cachedResult.isEmpty()) {\r\n                val result = dataSource.get(params)\r\n                result?.also {\r\n                    dataStorage.put(result, params)\r\n                } ?: emptyList()\r\n            } else {\r\n                cachedResult\r\n            }\r\n        }\r\n    },\r\n    DIRECT_READ {\r\n        /**\r\n         * Strategy implementation that receives data from main (read-only) source only.\r\n         */\r\n        override fun <T> combineLoaderFrom(\r\n            dataSource: DataSource<T>,\r\n            dataStorage: DataStorage<T>\r\n        ): (ParamsBundle) -> List<T> = { params: ParamsBundle ->\r\n            dataSource.get(params)!!\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates loader function according specified logic.\r\n     *\r\n     * @param dataSource Read-only data access source\r\n     * @param dataStorage Full data access source\r\n     * @return Function that encapsulates data sources interaction\r\n     */\r\n    abstract fun <T> combineLoaderFrom(\r\n        dataSource: DataSource<T>,\r\n        dataStorage: DataStorage<T>\r\n    ): (ParamsBundle) -> List<T>\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RepositoryStrategy.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RepositoryStrategy.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RepositoryStrategy.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RepositoryStrategy.kt	(date 1682764620637)
@@ -2,9 +2,9 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
 
 /**
  * Declares data sources usage logic.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RouteRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.currentLocale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\n\r\n/**\r\n * Declares read-only storage of available routes.\r\n *\r\n * @param mainSource Read-only data access source\r\n * @param reserveSource Full data access source\r\n * @param strategy Data sources usage logic\r\n */\r\nclass RouteRepository(\r\n    mainSource: DataSource<Route>,\r\n    reserveSource: DataStorage<Route>,\r\n    strategy: RepositoryStrategy\r\n) {\r\n    private val loadRoutes = strategy.combineLoaderFrom(mainSource, reserveSource)\r\n\r\n    /**\r\n     * Finds possible routes between specified locations.\r\n     *\r\n     * @param from Origin location\r\n     * @param to Destination location\r\n     * @param locale Desired results language\r\n     * @return List of matching results (m.b. empty)\r\n     */\r\n    fun getRoutes(\r\n        from: Location,\r\n        to: Location,\r\n        locale: Locale = currentLocale\r\n    ): List<Route> {\r\n        val params = ParamsBundle().apply {\r\n            put(Key.FROM, from)\r\n            put(Key.TO, to)\r\n            put(Key.LOCALE, locale)\r\n        }\r\n\r\n        return loadRoutes(params)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RouteRepository.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RouteRepository.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RouteRepository.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/RouteRepository.kt	(date 1682764619638)
@@ -2,14 +2,14 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
-import ru.z8.louttsev.bustrainflightmobile.shared.currentLocale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.currentLocale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.Key
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
 
 /**
  * Declares read-only storage of available routes.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationsRepositoryJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.currentLocale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocationsDbJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.LocationJson\r\n\r\nclass LocationsRepositoryJson (val db: LocationsDbJson) {\r\n\r\n    private val locations: Map<Int, LocationJson> = db.getLocations()\r\n\r\n    private val bookingIds: Map<Int, Int> = db.getBookingIds()\r\n\r\n    fun searchLocationsByName(\r\n        needle: String,\r\n        type: Location.Type = Location.Type.ALL,\r\n        limit: Int = 10,\r\n        locale: Locale = currentLocale\r\n    ): List<Location> {\r\n        val locationList = mutableListOf<Location>()\r\n        for(location in locations.values){\r\n            if (location.name.startsWith(needle, ignoreCase = true)){\r\n                locationList.add(Location(location.id, location.name))\r\n                if (locationList.size == limit)\r\n                    break\r\n            }\r\n        }\r\n\r\n        if (locationList.size < limit) {\r\n            for(location in locations.values){\r\n                if (location.name.contains(needle, ignoreCase = true)){\r\n                    locationList.add(Location(location.id, location.name))\r\n                    if (locationList.size == limit)\r\n                        break\r\n                }\r\n            }\r\n        }\r\n        return locationList\r\n    }\r\n\r\n    fun searchLocationById(id: Int): Location?{\r\n        for(location in locations.values){\r\n            if (location.id == id){\r\n                return Location(location.id, location.name)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    fun getBookingId(locationId: Int) = bookingIds[locationId]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationsRepositoryJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationsRepositoryJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationsRepositoryJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationsRepositoryJson.kt	(date 1682764620625)
@@ -1,10 +1,10 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
-import ru.z8.louttsev.bustrainflightmobile.shared.currentLocale
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocationsDbJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.LocationJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.currentLocale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocationsDbJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.LocationJson
 
 class LocationsRepositoryJson (val db: LocationsDbJson) {
 
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataStorage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\n\r\n/**\r\n * Determines full data access logic.\r\n */\r\ninterface DataStorage<T> : DataSource<T> {\r\n    /**\r\n     * Saves a data.\r\n     *\r\n     * @param data List of saving data (m.b. empty)\r\n     * @param parameters Source request specification\r\n     */\r\n    fun put(data: List<T>, parameters: ParamsBundle)\r\n\r\n    /**\r\n     * Narrows data source result to nonnull value, excluding internal errors.\r\n     */\r\n    override fun get(parameters: ParamsBundle): List<T>\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataStorage.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataStorage.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataStorage.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataStorage.kt	(date 1682764619867)
@@ -2,9 +2,9 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
 
 /**
  * Determines full data access logic.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.currentLocale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type.ALL\r\n\r\n/**\r\n * Declares read-only storage of available locations.\r\n *\r\n * @param mainSource Read-only data access source\r\n * @param reserveSource Full data access source\r\n * @param strategy Data sources usage logic\r\n */\r\nclass LocationRepository(\r\n    mainSource: DataSource<Location>,\r\n    reserveSource: DataStorage<Location>,\r\n    strategy: RepositoryStrategy\r\n) {\r\n    private val loadLocations = strategy.combineLoaderFrom(mainSource, reserveSource)\r\n\r\n    /**\r\n     * Finds all locations with matching fragments in the name.\r\n     *\r\n     * @param needle Search pattern\r\n     * @param type Narrows the search by route start/finish point\r\n     * @param limit Desired number of search results\r\n     * @param locale Desired results language\r\n     * @return List of matching results (m.b. empty)\r\n     */\r\n    fun searchLocationsByName(\r\n        needle: String,\r\n        type: Type = ALL,\r\n        limit: Int = 10,\r\n        locale: Locale = currentLocale\r\n    ): List<Location> {\r\n        val params = ParamsBundle().apply {\r\n            put(Key.NEEDLE, needle)\r\n            put(Key.TYPE, type)\r\n            put(Key.LIMIT, limit)\r\n            put(Key.LOCALE, locale)\r\n        }\r\n\r\n        return loadLocations(params)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationRepository.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationRepository.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationRepository.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/LocationRepository.kt	(date 1682764619877)
@@ -2,15 +2,15 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
-import ru.z8.louttsev.bustrainflightmobile.shared.currentLocale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type.ALL
+import ru.z8.louttsev.bustrainflightmobile.androidApp.currentLocale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.Key
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location.Type
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location.Type.ALL
 
 /**
  * Declares read-only storage of available locations.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model\r\n\r\n// TODO add implementation based on Ktor multi-platform client\r\n// to package ru.z8.louttsev.cheaptripmobile.shared.infrastructure.datasource, issue #1\r\n/**\r\n * Determines read-only data access logic.\r\n */\r\ninterface DataSource<T> {\r\n    /**\r\n     * Finds all data matching parameters.\r\n     *\r\n     * @param parameters Request specification\r\n     * @return List of matching results (m.b. empty) or null if an error occurred\r\n     */\r\n    fun get(parameters: ParamsBundle): List<T>?\r\n\r\n    /**\r\n     * Declares a merger of isolated parameters.\r\n     */\r\n    class ParamsBundle {\r\n        private val params = emptyMap<String, Any>().toMutableMap()\r\n\r\n        /**\r\n         * Adds parameter into bundle.\r\n         *\r\n         * @param key Allowable parameter's key\r\n         * @param value Added parameter\r\n         */\r\n        fun put(key: Key, value: Any) {\r\n            params[key.value] = value\r\n        }\r\n\r\n        /**\r\n         * Extracts parameter from bundle.\r\n         *\r\n         * @param key Allowable parameter's key\r\n         * @return Extracted parameter or null if it wasn't added early\r\n         */\r\n        fun get(key: Key): Any? {\r\n            return params[key.value]\r\n        }\r\n\r\n        /**\r\n         * Declares list of valid parameter keys.\r\n         */\r\n        enum class Key(internal val value: String) {\r\n            NEEDLE(\"needle\"),\r\n            TYPE(\"type\"),\r\n            FROM(\"from\"),\r\n            TO(\"to\"),\r\n            LIMIT(\"limit\"),\r\n            LOCALE(\"locale\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataSource.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataSource.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataSource.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/DataSource.kt	(date 1682764620086)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model
 
 // TODO add implementation based on Ktor multi-platform client
 // to package ru.z8.louttsev.cheaptripmobile.shared.infrastructure.datasource, issue #1
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/RepositoryModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.di\r\n\r\nimport org.koin.dsl.module\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocationsDbJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.RoutesDbJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.LocationsRepositoryJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RoutesRepositoryJson\r\n\r\nval repositoryModule = module {\r\n    single { LocationsDbJson() }\r\n    single { RoutesDbJson() }\r\n    single { LocationsRepositoryJson(get()) }\r\n    single { RoutesRepositoryJson(get(), get()) }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/RepositoryModule.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/RepositoryModule.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/RepositoryModule.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/RepositoryModule.kt	(date 1682764619694)
@@ -1,10 +1,10 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.di
+package ru.z8.louttsev.bustrainflightmobile.androidApp.di
 
 import org.koin.dsl.module
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocationsDbJson
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.RoutesDbJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.LocationsRepositoryJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RoutesRepositoryJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocationsDbJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.RoutesDbJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.LocationsRepositoryJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RoutesRepositoryJson
 
 val repositoryModule = module {
     single { LocationsDbJson() }
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/ViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.di\r\n\r\nimport org.koin.dsl.module\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel\r\n\r\nval viewModelModule = module {\r\n    single { MainViewModel(get(), get()) }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/ViewModelModule.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/ViewModelModule.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/ViewModelModule.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/di/ViewModelModule.kt	(date 1682764619552)
@@ -1,7 +1,7 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.di
+package ru.z8.louttsev.bustrainflightmobile.androidApp.di
 
 import org.koin.dsl.module
-import ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel
+import ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel.MainViewModel
 
 val viewModelModule = module {
     single { MainViewModel(get(), get()) }
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Route.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\nimport dev.icerock.moko.resources.StringResource\r\nimport dev.icerock.moko.resources.desc.Resource\r\nimport dev.icerock.moko.resources.desc.StringDesc\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.convertToString\r\n\r\n/**\r\n * Declares aggregate route between selected locations.\r\n *\r\n * @property routeType Route type in relation to ways of moving.\r\n * @property euroPrice Total route cost in EUR currency.\r\n * @property durationMinutes Total route duration in minutes.\r\n * @property directPaths Particular sections (paths) within aggregate route.\r\n */\r\ndata class Route(\r\n    val routeType: Type,\r\n    val euroPrice: Float,\r\n    val durationMinutes: Int,\r\n    val directPaths: List<Path>\r\n) {\r\n    /**\r\n     * Declares route type in relation to ways of moving.\r\n     *\r\n     * @property value String representation for JSON conversion\r\n     */\r\n    enum class Type(val value: String, private val stringResourceId: StringResource) {\r\n        GROUND(\"ground_routes\", MR.strings.route_type_ground),\r\n        MIXED(\"mixed_routes\", MR.strings.route_type_mixed),\r\n        FLYING(\"flying_routes\", MR.strings.route_type_flying),\r\n        FIXED_WITHOUT_RIDE_SHARE(\r\n            \"fixed_routes_without_ride_share\",\r\n            MR.strings.route_type_fixed_without_ride_share\r\n        ),\r\n        WITHOUT_RIDE_SHARE(\"routes_without_ride_share\", MR.strings.route_type_without_ride_share),\r\n        DIRECT(\"direct_routes\", MR.strings.route_type_direct);\r\n\r\n        override fun toString(): String {\r\n            return StringDesc.Resource(stringResourceId).convertToString()\r\n        }\r\n    }\r\n\r\n    private val pointsDelimiter = \" \\u2192 \"\r\n\r\n    /**\r\n     * String representation of route plan, eg. 'Muscat → Toronto → Abu Dhabi'\r\n     */\r\n    fun getRoutePlan() =\r\n        directPaths.joinToString(\r\n            pointsDelimiter,\r\n            transform = Path::from\r\n        ) + pointsDelimiter + directPaths.last().to\r\n\r\n    /**\r\n     * String representation of total route duration, eg. '2 d 11 h 27 m'\r\n     */\r\n    fun getRouteDuration() =\r\n        DurationConverter.minutesToTimeComponents(durationMinutes)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Route.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Route.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Route.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Route.kt	(date 1682764619770)
@@ -2,12 +2,12 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 import dev.icerock.moko.resources.StringResource
 import dev.icerock.moko.resources.desc.Resource
 import dev.icerock.moko.resources.desc.StringDesc
-import ru.z8.louttsev.bustrainflightmobile.shared.convertToString
+import ru.z8.louttsev.bustrainflightmobile.androidApp.convertToString
 
 /**
  * Declares aggregate route between selected locations.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/RouteJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\nimport kotlinx.serialization.SerialName\r\nimport kotlinx.serialization.Serializable\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.IntListSerializer\r\n\r\n@kotlinx.serialization.Serializable\r\ndata class RouteJson(\r\n    val from: Int,\r\n    val to: Int,\r\n    val price: Int,\r\n    val duration: Int,\r\n    @SerialName(\"direct_routes\")\r\n    @Serializable(with = IntListSerializer::class)\r\n    val directRoutes: List<Int>\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/RouteJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/RouteJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/RouteJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/RouteJson.kt	(date 1682764619995)
@@ -1,8 +1,8 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 import kotlinx.serialization.SerialName
 import kotlinx.serialization.Serializable
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.IntListSerializer
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.IntListSerializer
 
 @kotlinx.serialization.Serializable
 data class RouteJson(
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Path.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n/**\r\n * Declares particular section (path) within aggregate route.\r\n *\r\n * @property transportationType Path type in relation to transport.\r\n * @property euroPrice Path cost in EUR currency.\r\n * @property durationMinutes Path duration in minutes.\r\n * @property from Origin name.\r\n * @property to Destination name.\r\n */\r\ndata class Path(\r\n    val transportationType: TransportationType,\r\n    val euroPrice: Float,\r\n    val durationMinutes: Int,\r\n    val from: String,\r\n    val to: String\r\n) {\r\n    private val pointsDelimiter = \"\\u2009\\u2794\\u2009\"\r\n\r\n    /**\r\n     * String representation of path plan, eg. 'Muscat → Abu Dhabi'\r\n     */\r\n    fun getPathPlan() = from + pointsDelimiter + to\r\n\r\n    /**\r\n     * String representation of path duration, eg. '8 h 27 m'\r\n     */\r\n    fun getPathDuration() =\r\n        DurationConverter.minutesToTimeComponents(durationMinutes)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Path.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Path.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Path.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Path.kt	(date 1682764620591)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 /**
  * Declares particular section (path) within aggregate route.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Location.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n/**\r\n * Declares concrete location (city).\r\n *\r\n * @property id Location ID.\r\n * @property name Location name.\r\n */\r\ndata class Location(\r\n    val id: Int,\r\n    val name: String\r\n) {\r\n    override fun toString(): String {\r\n        return name\r\n    }\r\n\r\n    /**\r\n     * Declares location type in relation to route.\r\n     */\r\n    enum class Type {\r\n        ALL, FROM, TO\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Location.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Location.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Location.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Location.kt	(date 1682764620237)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 /**
  * Declares concrete location (city).
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/LocationJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\nimport kotlinx.serialization.SerialName\r\nimport kotlinx.serialization.Serializable\r\n\r\n//@Serializable\r\n//data class LocationMapJson(\r\n//    val location: Map<Int, LocationJson>\r\n//)\r\n\r\n@Serializable\r\ndata class LocationJson(\r\n    val id: Int,\r\n    val name: String,\r\n    @SerialName(\"country_name\")\r\n    val countryName: String,\r\n    val latitude: Double,\r\n    val longitude: Double\r\n)\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/LocationJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/LocationJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/LocationJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/LocationJson.kt	(date 1682764620550)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 import kotlinx.serialization.SerialName
 import kotlinx.serialization.Serializable
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DurationConverter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\nimport dev.icerock.moko.resources.StringResource\r\nimport dev.icerock.moko.resources.format\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.convertToString\r\n\r\n/**\r\n * Provides a duration conversion to string representations.\r\n */\r\nclass DurationConverter {\r\n    companion object {\r\n        /**\r\n         * Converts duration in minutes to string representation based on days, hours and minutes.\r\n         *\r\n         * @param value Time period in minutes\r\n         */\r\n        fun minutesToTimeComponents(value: Int): String {\r\n            fun divmod(dividend: Int, divider: Int): Pair<Int, Int> =\r\n                dividend / divider to dividend % divider\r\n\r\n            var (days, residue) = divmod(value, 1440)\r\n            var (hours, minutes) = divmod(residue, 60)\r\n\r\n            // reason: display no more than two groups together\r\n            // solution: if there are already days and hours, round up minutes\r\n            // and correct the values of hours and days if necessary\r\n            if (days > 0 && hours != 0) {\r\n                hours += minutes / 30\r\n                minutes = 0\r\n                days += hours / 24\r\n                hours %= 24\r\n            }\r\n\r\n            return listOf(\r\n                days.format(MR.strings.formatted_days_time_component),\r\n                hours.format(MR.strings.formatted_hours_time_component),\r\n                minutes.format(MR.strings.formatted_minutes_time_component)\r\n            ).filter { it.isNotEmpty() }.joinToString(\" \")\r\n        }\r\n\r\n        private fun Int.format(resource: StringResource): String =\r\n            if (this != 0) resource.format(this).convertToString() else \"\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DurationConverter.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DurationConverter.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DurationConverter.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DurationConverter.kt	(date 1682764619674)
@@ -2,11 +2,11 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 import dev.icerock.moko.resources.StringResource
 import dev.icerock.moko.resources.format
-import ru.z8.louttsev.bustrainflightmobile.shared.convertToString
+import ru.z8.louttsev.bustrainflightmobile.androidApp.convertToString
 
 /**
  * Provides a duration conversion to string representations.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Locale.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n/**\r\n * Declares supported language.\r\n *\r\n * @property languageCode Two-letter code accordingly ISO 639-1\r\n */\r\nenum class Locale(val languageCode: String) {\r\n    RU(\"ru\"), EN(\"en\");\r\n\r\n    override fun toString(): String {\r\n        return languageCode\r\n    }\r\n\r\n    companion object {\r\n        /**\r\n         * Gives the locale by its string representation.\r\n         *\r\n         * @param languageCode Two-letter code accordingly ISO 639-1\r\n         * @return Supported Locale or EN as default\r\n         */\r\n        fun fromLanguageCode(languageCode: String): Locale {\r\n            return values().find { it.languageCode == languageCode } ?: EN\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Locale.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Locale.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Locale.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Locale.kt	(date 1682764619951)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 /**
  * Declares supported language.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Country.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n/**\r\n * Declares countries relevant to affiliate programs.\r\n *\r\n * @property countryCode Alpha-2 code accordingly ISO 3166-1\r\n */\r\nenum class Country(val countryCode: String) {\r\n    RUSSIA(\"RU\"), BELARUS(\"BY\"), UKRAINE(\"UA\"), INDIA (\"IN\"), INDEFINITE(\"\");\r\n\r\n    companion object {\r\n        /**\r\n         * Gives the country by its string representation.\r\n         *\r\n         * @param countryCode countryCode Alpha-2 code accordingly ISO 3166-1\r\n         * @return Supported country or undefined as default\r\n         */\r\n        fun fromCountryCode(countryCode: String): Country {\r\n            return values().find { it.countryCode == countryCode } ?: INDEFINITE\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Country.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Country.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Country.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Country.kt	(date 1682764619961)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 /**
  * Declares countries relevant to affiliate programs.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DirectRouteJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n@kotlinx.serialization.Serializable\r\ndata class DirectRouteJson(\r\n    val from: Int,\r\n    val to: Int,\r\n    val transport: Int,\r\n    val price: Int,\r\n    val duration: Int\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DirectRouteJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DirectRouteJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DirectRouteJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/DirectRouteJson.kt	(date 1682764620359)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 @kotlinx.serialization.Serializable
 data class DirectRouteJson(
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/ConditionalClause.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\nimport dev.icerock.moko.resources.StringResource\r\nimport dev.icerock.moko.resources.desc.Resource\r\nimport dev.icerock.moko.resources.desc.StringDesc\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.convertToString\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType.FLIGHT\r\n\r\n/**\r\n * Declares clause or disclaimer in terms of transportation.\r\n *\r\n * @param applicableTransportationTypes Set of transports for which the clause is applicable\r\n * @param excludableLocations  Set of locations where clause is not applicable\r\n * @param stringResourceId Resource ID for string representation into UI\r\n */\r\nenum class ConditionalClause(\r\n    private val applicableTransportationTypes: Set<TransportationType>,\r\n    private val excludableLocations: Set<Location>,\r\n    private val stringResourceId: StringResource,\r\n) {\r\n    DURATION_INCLUDE_AIRPORT_TRANSFER(\r\n        applicableTransportationTypes = setOf(FLIGHT),\r\n        excludableLocations = setOf(\r\n            Location(387, \"Москва\"), Location(387, \"Moscow\"),\r\n            Location(377, \"Киев\"), Location(377, \"Kiev\")\r\n        ),\r\n        MR.strings.clause_duration_included_airport_transfer_text\r\n    );\r\n\r\n    override fun toString(): String {\r\n        return StringDesc.Resource(stringResourceId).convertToString()\r\n    }\r\n\r\n    companion object {\r\n        /**\r\n         * Finds the clauses applicable to the specific path\r\n         *\r\n         * @param path Path under checking\r\n         * @return Applicable clauses or empty list if no applicable\r\n         */\r\n        fun getClausesFor(path: Path): List<String> {\r\n            return values()\r\n                .filter { it.applicableTransportationTypes.contains(path.transportationType) }\r\n                .filter {\r\n                    it.excludableLocations.none { location ->\r\n                        location.name == path.from || location.name == path.to\r\n                    }\r\n                }\r\n                .map { it.toString() }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/ConditionalClause.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/ConditionalClause.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/ConditionalClause.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/ConditionalClause.kt	(date 1682764619452)
@@ -2,13 +2,13 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 import dev.icerock.moko.resources.StringResource
 import dev.icerock.moko.resources.desc.Resource
 import dev.icerock.moko.resources.desc.StringDesc
-import ru.z8.louttsev.bustrainflightmobile.shared.convertToString
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType.FLIGHT
+import ru.z8.louttsev.bustrainflightmobile.androidApp.convertToString
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.TransportationType.FLIGHT
 
 /**
  * Declares clause or disclaimer in terms of transportation.
Index: androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.androidApp\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.pm.ActivityInfo\r\nimport android.graphics.Rect\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.InputFilter\r\nimport android.text.Spanned\r\nimport android.view.View\r\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.view.inputmethod.InputMethodManager.*\r\nimport android.widget.*\r\nimport androidx.appcompat.app.ActionBar.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.widget.addTextChangedListener\r\nimport androidx.core.widget.doBeforeTextChanged\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.button.MaterialButton\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport dev.icerock.moko.mvvm.livedata.LiveData\r\nimport org.koin.android.ext.android.inject\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.adapters.AutoCompleteLocationsListAdapter\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.adapters.RouteListAdapter\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.databinding.ActivityMainBinding\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.AutoCompleteHandler\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel\r\nimport java.util.*\r\nimport kotlin.text.RegexOption.*\r\n\r\n/**\r\n * Declares main UI controller.\r\n */\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var mInputMethodManager: InputMethodManager\r\n\r\n    private val model: MainViewModel by inject()\r\n\r\n    @SuppressLint(\"InflateParams\", \"SourceLockedOrientationActivity\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.AppTheme)\r\n\r\n        super.onCreate(savedInstanceState)\r\n\r\n        mInputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n\r\n//        val model by viewModels<MainViewModel> {\r\n//            createWithFactory { MainViewModel(App.sLocationRepository, App.sRouteRepository) }\r\n//        }\r\n\r\n        val binding = ActivityMainBinding.inflate(layoutInflater).apply {\r\n            lifecycleOwner = this@MainActivity\r\n            viewModel = model // ignore probably IDE error message \"Cannot access class...\"\r\n        }\r\n\r\n        setContentView(binding.root)\r\n\r\n        if (resources.getBoolean(R.bool.isPhone)) {\r\n            requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT\r\n        }\r\n\r\n        supportActionBar?.apply {\r\n            customView = layoutInflater.inflate(R.layout.action_bar, null)\r\n            customView.layoutParams = LayoutParams(MATCH_PARENT, MATCH_PARENT)\r\n            displayOptions = DISPLAY_SHOW_CUSTOM\r\n        }\r\n\r\n        with(binding) {\r\n            originTextView.setup(\r\n                handler = model.origins,\r\n                inputLayout = binding.originInputLayout\r\n            )\r\n\r\n//            originClearIcon.setOnClickListener {\r\n//                model.origins.onItemReset()\r\n//                originTextView.clearText()\r\n//                originTextView.requestFocus()\r\n//                mInputMethodManager.showSoftInput(originTextView, SHOW_IMPLICIT)\r\n//            }\r\n\r\n            destinationTextView.setup(\r\n                handler = model.destinations,\r\n                inputLayout = binding.destinationInputLayout\r\n            )\r\n\r\n//            destinationClearIcon.setOnClickListener {\r\n//                model.destinations.onItemReset()\r\n//                destinationTextView.clearText()\r\n//                destinationTextView.requestFocus()\r\n//                mInputMethodManager.showSoftInput(destinationTextView, SHOW_IMPLICIT)\r\n//            }\r\n\r\n            (clearButton as MaterialButton).setOnClickListener {\r\n                model.origins.onItemReset()\r\n                originTextView.clearText()\r\n                model.destinations.onItemReset()\r\n                destinationTextView.clearText()\r\n                originTextView.requestFocus()\r\n                mInputMethodManager.showSoftInput(originTextView, SHOW_IMPLICIT)\r\n            }\r\n\r\n            (goButton as MaterialButton).setup(\r\n                isReady = model.routes.isReadyToBuild,\r\n                listener = {\r\n                    model.routes.build(\r\n                        emptyResultHandler = { showNoResultsMessage() },\r\n                        onUpdate = {\r\n                            routeList.smoothScrollToPosition(0)\r\n                            logo?.visibility = View.GONE\r\n                            resultsTextView?.visibility = View.VISIBLE\r\n                            routeList.visibility = View.VISIBLE\r\n                        }\r\n                    )\r\n\r\n                    routeList.visibility = View.GONE\r\n                    logo?.visibility = View.INVISIBLE\r\n                    resultsTextView?.visibility = View.INVISIBLE\r\n                    mInputMethodManager.hideSoftInputFromWindow(\r\n                        it.windowToken,\r\n                        HIDE_NOT_ALWAYS\r\n                    )\r\n                }\r\n            )\r\n\r\n            with(routeList) {\r\n                layoutManager = LinearLayoutManager(this@MainActivity)\r\n                adapter = RouteListAdapter(model.routes.data)\r\n                addItemDecoration(object : RecyclerView.ItemDecoration() {\r\n                    override fun getItemOffsets(\r\n                        outRect: Rect,\r\n                        itemPosition: Int,\r\n                        parent: RecyclerView\r\n                    ) {\r\n                        outRect.bottom = resources.getDimension(R.dimen.route_item_margin).toInt()\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun createWithFactory(\r\n        create: () -> ViewModel\r\n    ): ViewModelProvider.Factory = object : ViewModelProvider.Factory {\r\n        override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n            return create.invoke() as T\r\n        }\r\n    }\r\n\r\n    private fun AutoCompleteTextView.setup(\r\n        handler: AutoCompleteHandler<Location>,\r\n        inputLayout: TextInputLayout\r\n    ) {\r\n        threshold = 1\r\n\r\n        setAdapter(\r\n            AutoCompleteLocationsListAdapter(handler.data)\r\n        )\r\n\r\n        filters = arrayOf(\r\n            object : InputFilter {\r\n                override fun filter(\r\n                    source: CharSequence,\r\n                    start: Int,\r\n                    end: Int,\r\n                    dest: Spanned?,\r\n                    dstart: Int,\r\n                    dend: Int\r\n                ): CharSequence {\r\n                    val changedText = source.subSequence(start, end)\r\n\r\n                    val allowable = Regex(\"^[-a-zа-яё .]+$\", IGNORE_CASE)\r\n\r\n                    @Suppress(\"LiftReturnOrAssignment\")\r\n                    if (source.isNotEmpty() && !allowable.matches(changedText)) {\r\n                        inputLayout.showErrorMessage(getString(R.string.not_allowable_character_error_message))\r\n                        return source.filter { allowable.matches(it.toString()) }\r\n                    } else {\r\n                        inputLayout.hideErrorMessage()\r\n                        return source\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n        doBeforeTextChanged { _, _, count, after ->\r\n            handler.isBeingBackspaced = after < count\r\n            handler.wasSelected = handler.isItemSelected()\r\n        }\r\n\r\n        addTextChangedListener { changedEditableText: Editable? ->\r\n            handler.onItemReset()\r\n            handler.isBeingUpdated = true\r\n\r\n            val changedText = changedEditableText.toString()\r\n\r\n            handler.onTextChanged(\r\n                text = changedText,\r\n                locale = getInputLocale(changedText),\r\n                emptyResultHandler = {\r\n                    if (textLength() > 1) {\r\n                        showNoResultsMessage()\r\n                        selectSuitableLocation(handler)\r\n                    } else {\r\n                        clearText()\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        setOnEditorActionListener { _, actionId, _ ->\r\n            when (actionId) {\r\n                EditorInfo.IME_ACTION_DONE -> {\r\n                    dismissDropDown()\r\n                    true\r\n                }\r\n                else -> false\r\n            }\r\n        }\r\n\r\n        setOnItemClickListener { parent: AdapterView<*>, _, position: Int, _ ->\r\n            val selectedLocation = parent.getItemAtPosition(position) as Location\r\n\r\n            handler.onItemSelected(\r\n                selectedLocation,\r\n                invalidSelectionHandler = ::showInvalidSelectionMessage\r\n            )\r\n            performCompletion()\r\n        }\r\n\r\n        setOnDismissListener {\r\n            fun firstSymbolInputted() = textLength() == 1 && !handler.isBeingBackspaced\r\n            fun lastSymbolDeleted() = handler.wasSelected && handler.isBeingBackspaced\r\n\r\n            if (!handler.isItemSelected() && textLength() > 0) {\r\n                if (!handler.isBeingUpdated || firstSymbolInputted() || lastSymbolDeleted()) {\r\n                    selectSuitableLocation(handler)\r\n                }\r\n            }\r\n            handler.isBeingUpdated = false\r\n            handler.wasSelected = false\r\n        }\r\n\r\n        setOnFocusChangeListener { _, hasFocus ->\r\n            if (!hasFocus) {\r\n                inputLayout.hideErrorMessage()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun AutoCompleteTextView.textLength() = text.toString().length\r\n\r\n    private fun getInputLocale(text: String): Locale = Locale.fromLanguageCode(\r\n        if (Regex(\"^[-а-яё .]+$\", IGNORE_CASE).matches(text)) {\r\n            \"ru\"\r\n        } else {\r\n            \"en\"\r\n        }\r\n    )\r\n\r\n    private var mNoDataErrorToast: Toast? = null\r\n\r\n    private fun showNoResultsMessage() {\r\n        mNoDataErrorToast?.let {\r\n            it.cancel()\r\n            mNoDataErrorToast = null\r\n        }\r\n\r\n        mNoDataErrorToast = Toast.makeText(\r\n            this@MainActivity,\r\n            getString(R.string.no_data_error_message),\r\n            Toast.LENGTH_SHORT\r\n        ).apply { show() }\r\n    }\r\n\r\n    private fun showInvalidSelectionMessage() {\r\n        Toast.makeText(\r\n            this@MainActivity,\r\n            getString(R.string.invalid_selection_error_message),\r\n            Toast.LENGTH_SHORT\r\n        ).show()\r\n    }\r\n\r\n    private fun AutoCompleteTextView.clearText() {\r\n        text.clear()\r\n    }\r\n\r\n    private fun AutoCompleteTextView.selectSuitableLocation(handler: AutoCompleteHandler<Location>) {\r\n        if (handler.data.value.isNotEmpty()) {\r\n            val suitableLocation = handler.data.value.first()\r\n\r\n            setText(suitableLocation.name)\r\n            handler.onItemSelected(\r\n                suitableLocation,\r\n                invalidSelectionHandler = ::showInvalidSelectionMessage\r\n            )\r\n            performCompletion()\r\n        }\r\n    }\r\n\r\n    private fun MaterialButton.setup(isReady: LiveData<Boolean>, listener: (View) -> Unit) {\r\n        isReady.addObserver {\r\n            if (it) {\r\n                setOnClickListener(listener)\r\n//                setBackgroundColor(\r\n//                    ContextCompat.getColor(this@MainActivity, R.color.colorAccent)\r\n//                )\r\n            } else {\r\n                setOnClickListener(null)\r\n//                setBackgroundColor(\r\n//                    ContextCompat.getColor(this@MainActivity, R.color.colorInactiveViewBackground)\r\n//                )\r\n            }\r\n        }\r\n\r\n        setOnFocusChangeListener { view, hasFocus ->\r\n            if (hasFocus) {\r\n                view.performClick()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun TextInputLayout.showErrorMessage(message: String) {\r\n        error = message\r\n    }\r\n\r\n    private fun TextInputLayout.hideErrorMessage() {\r\n        error = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/MainActivity.kt b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/MainActivity.kt
--- a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/MainActivity.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/MainActivity.kt	(date 1682764620347)
@@ -29,9 +29,9 @@
 import ru.z8.louttsev.bustrainflightmobile.androidApp.adapters.AutoCompleteLocationsListAdapter
 import ru.z8.louttsev.bustrainflightmobile.androidApp.adapters.RouteListAdapter
 import ru.z8.louttsev.bustrainflightmobile.androidApp.databinding.ActivityMainBinding
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.AutoCompleteHandler
-import ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel.AutoCompleteHandler
+import ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel.MainViewModel
 import java.util.*
 import kotlin.text.RegexOption.*
 
Index: androidApp/src/main/res/layout-sw600dp/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <data>\r\n        <variable\r\n            name=\"viewModel\"\r\n            type=\"ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel\" />\r\n    </data>\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/main_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/colorBackground\"\r\n        tools:context=\".MainActivity\">\r\n\r\n        <com.google.android.material.textfield.TextInputLayout\r\n            android:id=\"@+id/origin_input_layout\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"8dp\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:layout_marginEnd=\"4dp\"\r\n            android:background=\"@android:color/white\"\r\n            android:hint=\"@string/from_location_input_field_hint\"\r\n            app:errorEnabled=\"true\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/origin_clear_icon\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n            <AutoCompleteTextView\r\n                android:id=\"@+id/origin_text_view\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:imeOptions=\"actionDone\"\r\n                android:importantForAutofill=\"no\"\r\n                android:inputType=\"textNoSuggestions\"\r\n                tools:text=\"Muscat\" />\r\n\r\n        </com.google.android.material.textfield.TextInputLayout>\r\n\r\n\r\n        <ImageView\r\n            android:id=\"@+id/origin_clear_icon\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:layout_marginEnd=\"16dp\"\r\n            app:layout_constraintDimensionRatio=\"1\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/guideline\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/origin_input_layout\"\r\n            app:srcCompat=\"@drawable/ic_clear\" />\r\n\r\n        <com.google.android.material.textfield.TextInputLayout\r\n            android:id=\"@+id/destination_input_layout\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginStart=\"16dp\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:layout_marginEnd=\"4dp\"\r\n            android:background=\"@android:color/white\"\r\n            android:hint=\"@string/to_location_input_field_hint\"\r\n            app:errorEnabled=\"true\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/destination_clear_icon\"\r\n            app:layout_constraintStart_toStartOf=\"@+id/guideline\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n            <AutoCompleteTextView\r\n                android:id=\"@+id/destination_text_view\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:imeOptions=\"actionDone\"\r\n                android:importantForAutofill=\"no\"\r\n                android:inputType=\"textNoSuggestions\"\r\n                tools:text=\"Abu Dhabi\" />\r\n\r\n        </com.google.android.material.textfield.TextInputLayout>\r\n\r\n        <ImageView\r\n            android:id=\"@+id/destination_clear_icon\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            app:layout_constraintDimensionRatio=\"1\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/destination_input_layout\"\r\n            app:srcCompat=\"@drawable/ic_clear\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/clearButton\"\r\n            style=\"@android:style/Widget.Holo.Light.Button\"\r\n            android:layout_width=\"120dp\"\r\n            android:layout_height=\"36dp\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:layout_marginEnd=\"32dp\"\r\n            android:background=\"@color/colorActiveViewBackground\"\r\n            android:text=\"@string/clear_button_text\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/goButton\"\r\n            app:layout_constraintHorizontal_bias=\"0.5\"\r\n            app:layout_constraintHorizontal_chainStyle=\"packed\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/origin_input_layout\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/goButton\"\r\n            style=\"@android:style/Widget.Holo.Light.Button\"\r\n            android:layout_width=\"120dp\"\r\n            android:layout_height=\"36dp\"\r\n            android:layout_marginStart=\"32dp\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:background=\"@color/colorInactiveViewBackground\"\r\n            android:focusable=\"true\"\r\n            android:focusableInTouchMode=\"true\"\r\n            android:text=\"@string/go_button_text\"\r\n            android:textColor=\"@android:color/white\"\r\n            android:textStyle=\"bold\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintHorizontal_bias=\"0.5\"\r\n            app:layout_constraintHorizontal_chainStyle=\"packed\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/clearButton\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/destination_input_layout\" />\r\n\r\n        <ImageView\r\n            android:id=\"@+id/logo\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_marginStart=\"16dp\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:layout_marginEnd=\"16dp\"\r\n            android:layout_marginBottom=\"16dp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintDimensionRatio=\"1\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/clearButton\"\r\n            app:srcCompat=\"@drawable/logo\" />\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/route_list\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_marginStart=\"8dp\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:layout_marginEnd=\"8dp\"\r\n            android:layout_marginBottom=\"8dp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/clearButton\" />\r\n\r\n        <androidx.constraintlayout.widget.Guideline\r\n            android:id=\"@+id/guideline\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\"\r\n            app:layout_constraintGuide_percent=\"0.5\" />\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/res/layout-sw600dp/activity_main.xml b/androidApp/src/main/res/layout-sw600dp/activity_main.xml
--- a/androidApp/src/main/res/layout-sw600dp/activity_main.xml	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/res/layout-sw600dp/activity_main.xml	(date 1682764619465)
@@ -6,7 +6,7 @@
     <data>
         <variable
             name="viewModel"
-            type="ru.z8.louttsev.bustrainflightmobile.shared.viewmodel.MainViewModel" />
+            type="ru.z8.louttsev.bustrainflightmobile.androidApp.viewmodel.MainViewModel" />
     </data>
 
     <androidx.constraintlayout.widget.ConstraintLayout
Index: androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/RouteListAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.androidApp.adapters\r\n\r\nimport android.animation.ValueAnimator\r\nimport android.content.Context\r\nimport android.graphics.Color\r\nimport android.graphics.PorterDuff\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.animation.*\r\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\r\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport androidx.core.view.setPadding\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport dev.icerock.moko.mvvm.livedata.LiveData\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.R\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.databinding.ItemRouteBinding\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\n\r\n/**\r\n * Declares adapter for route list as result of searching.\r\n *\r\n * @param liveData Observable source of routes data\r\n */\r\nclass RouteListAdapter(\r\n    liveData: LiveData<List<Route>>\r\n) : RecyclerView.Adapter<RouteListAdapter.ViewHolder>() {\r\n    private var mRoutes: List<Route>\r\n    private val animationDuration = 200L\r\n\r\n    init {\r\n        mRoutes = liveData.value\r\n        liveData.addObserver {\r\n            mRoutes = it\r\n            notifyDataSetChanged()\r\n        }\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val context = parent.context\r\n        val binding = ItemRouteBinding.inflate(LayoutInflater.from(context))\r\n\r\n        with(binding) {\r\n            root.layoutParams = RecyclerView.LayoutParams(MATCH_PARENT, WRAP_CONTENT)\r\n            pathList.layoutManager = LinearLayoutManager(context)\r\n        }\r\n\r\n        return ViewHolder(binding)\r\n    }\r\n\r\n    private fun slideView(view: View, currentHeight: Int, newHeight: Int) {\r\n\r\n        val slideAnimator = ValueAnimator\r\n            .ofInt(currentHeight, newHeight)\r\n            .setDuration(animationDuration)\r\n\r\n\r\n        /* We use an update listener which listens to each tick\r\n         * and manually updates the height of the view  */\r\n\r\n        slideAnimator.addUpdateListener { animation1 ->\r\n            val value = animation1.animatedValue as Int\r\n            view.layoutParams.height = value\r\n            view.requestLayout()\r\n        }\r\n        slideAnimator.duration = animationDuration\r\n        slideAnimator.interpolator = AccelerateDecelerateInterpolator()\r\n        slideAnimator.start()\r\n\r\n        /*  We use an animationSet to play the animation  */\r\n\r\n//        AnimatorSet().apply {\r\n//            interpolator = AccelerateDecelerateInterpolator()\r\n//            play(slideAnimator)\r\n//            start()\r\n//        }\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val currentRoute = mRoutes[position]\r\n\r\n        with(holder.binding) {\r\n            val context = root.context\r\n\r\n            model = currentRoute // ignore probably IDE error message \"Cannot access class...\"\r\n            pathList.adapter = PathListAdapter(currentRoute.directPaths)\r\n            executePendingBindings()\r\n\r\n            root.setOnClickListener { openIndicator.isChecked = !openIndicator.isChecked }\r\n            openIndicator.setOnCheckedChangeListener { _, isChecked ->\r\n                if (isChecked) {\r\n                    pathList.visibility = View.VISIBLE\r\n                    euroPrice.visibility = View.GONE\r\n                    duration.visibility = View.GONE\r\n                } else {\r\n                    pathList.visibility = View.GONE\r\n                    euroPrice.visibility = View.VISIBLE\r\n                    duration.visibility = View.VISIBLE\r\n                }\r\n            }\r\n            openIndicator.isChecked = false\r\n\r\n            transportIconContainer.addIcons(currentRoute.directPaths, context)\r\n        }\r\n    }\r\n\r\n    private fun LinearLayout.addIcons(paths: List<Path>, context: Context) {\r\n        removeAllViews()\r\n\r\n        paths.forEach { path ->\r\n            addView(\r\n                ImageView(context).apply {\r\n                    setImageResource(path.transportationType.imageResource.drawableResId)\r\n                    setColorFilter(Color.BLACK, PorterDuff.Mode.SRC_ATOP)\r\n                    val padding =\r\n                        context.resources.getDimension(R.dimen.transport_icon_margin).toInt()\r\n                    setPadding(padding)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int = mRoutes.size\r\n\r\n    class ViewHolder(val binding: ItemRouteBinding) : RecyclerView.ViewHolder(binding.root)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/RouteListAdapter.kt b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/RouteListAdapter.kt
--- a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/RouteListAdapter.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/RouteListAdapter.kt	(date 1682764619532)
@@ -22,8 +22,8 @@
 import dev.icerock.moko.mvvm.livedata.LiveData
 import ru.z8.louttsev.bustrainflightmobile.androidApp.R
 import ru.z8.louttsev.bustrainflightmobile.androidApp.databinding.ItemRouteBinding
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Path
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
 
 /**
  * Declares adapter for route list as result of searching.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RouteDb.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\n\r\n/**\r\n * Declares routes storage implementation.\r\n *\r\n * @param sqlDriver A platform-specific implementation of the SQLite driver.\r\n */\r\nclass RouteDb(sqlDriver: SqlDriver) : LocalDbStorage<Route>(sqlDriver) {\r\n    override fun put(data: List<Route>, parameters: ParamsBundle) {\r\n        val fromLocation = parameters.get(Key.FROM) as Location\r\n        val toLocation = parameters.get(Key.TO) as Location\r\n        val locale = parameters.get(Key.LOCALE) as Locale\r\n\r\n        data.forEach { route: Route ->\r\n            updateOrInsertRoute(route, fromLocation.name, toLocation.name, locale.languageCode)\r\n        }\r\n    }\r\n\r\n    override fun get(parameters: ParamsBundle): List<Route> {\r\n        val fromLocation = parameters.get(Key.FROM) as Location\r\n        val toLocation = parameters.get(Key.TO) as Location\r\n        val locale = parameters.get(Key.LOCALE) as Locale\r\n\r\n        return selectRoutesByLocations(fromLocation.name, toLocation.name, locale.languageCode)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RouteDb.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RouteDb.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RouteDb.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RouteDb.kt	(date 1682764620539)
@@ -2,14 +2,14 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence
 
 import com.squareup.sqldelight.db.SqlDriver
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.Key
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
 
 /**
  * Declares routes storage implementation.
Index: androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/AutoCompleteLocationsListAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.androidApp.adapters\r\n\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.BaseAdapter\r\nimport android.widget.Filter\r\nimport android.widget.Filterable\r\nimport android.widget.TextView\r\nimport dev.icerock.moko.mvvm.livedata.LiveData\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.R\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\n\r\n/**\r\n * Declares adapter for location list as base for autocomplete input fields.\r\n *\r\n * @param liveData Observable source of locations data\r\n */\r\nclass AutoCompleteLocationsListAdapter(\r\n    liveData: LiveData<List<Location>>\r\n) : BaseAdapter(), Filterable {\r\n    private var mLocations: List<Location>\r\n\r\n    init {\r\n        mLocations = liveData.value\r\n        liveData.addObserver {\r\n            mLocations = it\r\n            notifyDataSetChanged()\r\n        }\r\n    }\r\n\r\n    override fun getCount(): Int = mLocations.size\r\n\r\n    override fun getItem(position: Int): Any = mLocations[position]\r\n\r\n    override fun getItemId(position: Int): Long = position.toLong()\r\n\r\n    override fun getView(position: Int, cacheView: View?, parent: ViewGroup): View {\r\n        val context = parent.context\r\n\r\n        return TextView(context).apply {\r\n            text = mLocations[position].name\r\n            val padding = context.resources.getDimension(R.dimen.location_item_padding).toInt()\r\n            setPadding(0, padding, 0, padding)\r\n            textSize = 18f\r\n        }\r\n    }\r\n\r\n    // this implementation does nothing,\r\n    // filtering is performed by the model in TextChangedListener\r\n    override fun getFilter(): Filter = object : Filter() {\r\n        override fun performFiltering(constraint: CharSequence?) = FilterResults()\r\n\r\n        override fun publishResults(constraint: CharSequence?, results: FilterResults?) {\r\n            // nothing\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/AutoCompleteLocationsListAdapter.kt b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/AutoCompleteLocationsListAdapter.kt
--- a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/AutoCompleteLocationsListAdapter.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/AutoCompleteLocationsListAdapter.kt	(date 1682764620076)
@@ -12,7 +12,7 @@
 import android.widget.TextView
 import dev.icerock.moko.mvvm.livedata.LiveData
 import ru.z8.louttsev.bustrainflightmobile.androidApp.R
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
 
 /**
  * Declares adapter for location list as base for autocomplete input fields.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RoutesDbJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence\r\n\r\nimport kotlinx.serialization.KSerializer\r\nimport kotlinx.serialization.builtins.ListSerializer\r\nimport kotlinx.serialization.builtins.serializer\r\nimport kotlinx.serialization.decodeFromString\r\nimport kotlinx.serialization.descriptors.SerialDescriptor\r\nimport kotlinx.serialization.encoding.Decoder\r\nimport kotlinx.serialization.encoding.Encoder\r\nimport kotlinx.serialization.json.Json\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.ResourceReader\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.DirectRouteJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.RouteJson\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Transport\r\n\r\nclass RoutesDbJson {\r\n\r\n    private val directRoutesData: Map<Int, DirectRouteJson> by lazy {\r\n        val jsonRoutesString = ResourceReader().readResource(\"MR/files/direct_routes.json\")\r\n        Json.decodeFromString<Map<Int, DirectRouteJson>>(jsonRoutesString)\r\n    }\r\n\r\n    fun getDirectRoutes() = directRoutesData\r\n\r\n    private val flyingRoutesData: Map<Int, RouteJson> by lazy {\r\n        val jsonRoutesString = ResourceReader().readResource(\"MR/files/flying_routes.json\")\r\n        Json.decodeFromString<Map<Int, RouteJson>>(jsonRoutesString)\r\n    }\r\n\r\n    fun getFlyingRoutes() = flyingRoutesData\r\n\r\n    private val fixedRoutesData: Map<Int, RouteJson> by lazy {\r\n        val jsonRoutesString = ResourceReader().readResource(\"MR/files/fixed_routes.json\")\r\n        Json.decodeFromString<Map<Int, RouteJson>>(jsonRoutesString)\r\n    }\r\n\r\n    fun getFixedRoutes() = fixedRoutesData\r\n\r\n\r\n    private val mixedRoutesData: Map<Int, RouteJson> by lazy {\r\n        val jsonRoutesString = ResourceReader().readResource(\"MR/files/routes.json\")\r\n        Json.decodeFromString<Map<Int, RouteJson>>(jsonRoutesString)\r\n    }\r\n\r\n    fun getMixedRoutes() = mixedRoutesData\r\n\r\n    private val transportData: Map<Int, Transport> by lazy {\r\n        val jsonTransportString = ResourceReader().readResource(\"MR/files/transport.json\")\r\n        Json.decodeFromString<Map<Int, Transport>>(jsonTransportString)\r\n    }\r\n\r\n    fun getTransport() = transportData\r\n}\r\n\r\nobject IntListSerializer : KSerializer<List<Int>> {\r\n\r\n    override val descriptor: SerialDescriptor =\r\n        ListSerializer(Int.serializer()).descriptor\r\n\r\n    override fun serialize(encoder: Encoder, value: List<Int>) {\r\n        encoder.encodeString(value.joinToString(\",\"))\r\n    }\r\n\r\n    override fun deserialize(decoder: Decoder): List<Int> {\r\n        return decoder.decodeString().split(\",\").map { it.toInt() }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RoutesDbJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RoutesDbJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RoutesDbJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/RoutesDbJson.kt	(date 1682764619932)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence
 
 import kotlinx.serialization.KSerializer
 import kotlinx.serialization.builtins.ListSerializer
@@ -8,10 +8,10 @@
 import kotlinx.serialization.encoding.Decoder
 import kotlinx.serialization.encoding.Encoder
 import kotlinx.serialization.json.Json
-import ru.z8.louttsev.bustrainflightmobile.shared.ResourceReader
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.DirectRouteJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.RouteJson
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Transport
+import ru.z8.louttsev.bustrainflightmobile.androidApp.ResourceReader
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.DirectRouteJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.RouteJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Transport
 
 class RoutesDbJson {
 
Index: androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/PathListAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.androidApp.adapters\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.view.LayoutInflater\r\nimport android.view.View.*\r\nimport android.view.ViewGroup\r\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\r\nimport android.view.ViewGroup.LayoutParams.WRAP_CONTENT\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport io.github.aakira.napier.Napier\r\nimport org.koin.core.component.KoinComponent\r\nimport org.koin.core.component.inject\r\nimport ru.z8.louttsev.bustrainflightmobile.androidApp.databinding.ItemPathBinding\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Country\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.payload.AffiliateProgram\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.LocationsRepositoryJson\r\n\r\n/**\r\n * Declares adapter for path list as part of route view.\r\n *\r\n * @param mPaths Source of paths data\r\n */\r\nclass PathListAdapter(\r\n    private val mPaths: List<Path>\r\n) : RecyclerView.Adapter<PathListAdapter.ViewHolder>(), KoinComponent {\r\n\r\n    val locationRepository: LocationsRepositoryJson by inject()\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        val binding = ItemPathBinding.inflate(LayoutInflater.from(parent.context))\r\n\r\n        binding.root.apply {\r\n            layoutParams = RecyclerView.LayoutParams(MATCH_PARENT, WRAP_CONTENT)\r\n        }\r\n\r\n        return ViewHolder(binding)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val currentPath = mPaths[position]\r\n\r\n        with(holder.binding) {\r\n            model = currentPath // ignore probably IDE error message \"Cannot access class...\"\r\n            executePendingBindings()\r\n\r\n            with(buyTicketButton) {\r\n                // TODO change country stub to auto detected country, issue #3\r\n                val affiliateUrl = AffiliateProgram.getAffiliateUrl(currentPath, Country.INDEFINITE)\r\n                Napier.d(affiliateUrl)\r\n                if (affiliateUrl.isNotEmpty()) {\r\n                    visibility = VISIBLE\r\n                    setOnClickListener {\r\n                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(affiliateUrl))\r\n                        root.context.startActivity(intent)\r\n                    }\r\n                } else {\r\n                    visibility = GONE\r\n                    setOnClickListener(null)\r\n                }\r\n            }\r\n\r\n            with(hostelworldButton) {\r\n                val affiliateUrl =\r\n                    \"https://hostelworld.prf.hn/click/camref:1101lmmsq/[p_id:1011l441771]\"\r\n                setOnClickListener {\r\n                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(affiliateUrl))\r\n                    root.context.startActivity(intent)\r\n                }\r\n            }\r\n            with(bookingButton) {\r\n                val affiliateUrl =\r\n                    \"https://www.booking.com/searchresults.en.html?aid=7920152&city=\" +\r\n                            locationRepository.getBookingId(\r\n                                locationRepository.searchLocationsByName(\r\n                                    currentPath.to\r\n                                )[0].id\r\n                            ) +\r\n                            \"&lang=en&selected_currency=EUR\"\r\n                setOnClickListener {\r\n                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(affiliateUrl))\r\n                    root.context.startActivity(intent)\r\n                }\r\n            }\r\n\r\n//            with(conditionalClause) {\r\n//                val clauses = ConditionalClause.getClausesFor(currentPath)\r\n//\r\n//                if (clauses.isNotEmpty()) {\r\n//                    text = clauses.joinToString(\"\\n\")\r\n//                    visibility = VISIBLE\r\n//                } else {\r\n//                    text = \"\"\r\n//                    visibility = GONE\r\n//                }\r\n//            }\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int = mPaths.size\r\n\r\n    class ViewHolder(val binding: ItemPathBinding) : RecyclerView.ViewHolder(binding.root)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/PathListAdapter.kt b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/PathListAdapter.kt
--- a/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/PathListAdapter.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/androidApp/src/main/java/ru/z8/louttsev/bustrainflightmobile/androidApp/adapters/PathListAdapter.kt	(date 1682764620469)
@@ -16,10 +16,10 @@
 import org.koin.core.component.KoinComponent
 import org.koin.core.component.inject
 import ru.z8.louttsev.bustrainflightmobile.androidApp.databinding.ItemPathBinding
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Country
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path
-import ru.z8.louttsev.bustrainflightmobile.shared.payload.AffiliateProgram
-import ru.z8.louttsev.bustrainflightmobile.shared.model.LocationsRepositoryJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Country
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Path
+import ru.z8.louttsev.bustrainflightmobile.androidApp.payload.AffiliateProgram
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.LocationsRepositoryJson
 
 /**
  * Declares adapter for path list as part of route view.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationsDbJson.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence\r\n\r\nimport kotlinx.serialization.decodeFromString\r\nimport kotlinx.serialization.json.Json\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.ResourceReader\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.LocationJson\r\n\r\n\r\nclass LocationsDbJson {\r\n\r\n    private val locationsData: Map<Int, LocationJson> by lazy {\r\n        val jsonString = ResourceReader().readResource(\"MR/files/locations.json\")\r\n        Json.decodeFromString(jsonString)\r\n    }\r\n\r\n    fun getLocations() = locationsData\r\n\r\n    private val bookingIdsData: Map<Int, Int> by lazy {\r\n        val jsonString = ResourceReader().readResource(\"MR/files/booking_ids.json\")\r\n        Json.decodeFromString(jsonString)\r\n    }\r\n\r\n    fun getBookingIds() = bookingIdsData\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationsDbJson.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationsDbJson.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationsDbJson.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationsDbJson.kt	(date 1682764619921)
@@ -1,9 +1,9 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence
 
 import kotlinx.serialization.decodeFromString
 import kotlinx.serialization.json.Json
-import ru.z8.louttsev.bustrainflightmobile.shared.ResourceReader
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.LocationJson
+import ru.z8.louttsev.bustrainflightmobile.androidApp.ResourceReader
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.LocationJson
 
 
 class LocationsDbJson {
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocalDbStorage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataStorage\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType\r\n\r\n/**\r\n * Declares data storage based on local database.\r\n *\r\n * @param sqlDriver A platform-specific implementation of the SQLite driver.\r\n */\r\nabstract class LocalDbStorage<T>(sqlDriver: SqlDriver) : DataStorage<T> {\r\n    private val queries = LocalDb(sqlDriver).localDbQueries\r\n\r\n    /**\r\n     * Tries to update location record; if it doesn't exist, inserts it.\r\n     *\r\n     * @param location Updated/inserted location\r\n     * @param typeName Location's type in relation to route\r\n     * @param languageCode Two-letter code accordingly ISO 639-1\r\n     */\r\n    protected fun updateOrInsertLocation(\r\n        location: Location,\r\n        typeName: String,\r\n        languageCode: String\r\n    ) {\r\n        val (locationId, locationName) = location\r\n\r\n        // the method violates the expected order of the arguments\r\n        queries.updateOrInsertLocation(locationName, locationId, typeName, languageCode)\r\n    }\r\n\r\n    /**\r\n     * Finds locations that have search string in their name.\r\n     *\r\n     * @param needle Search string\r\n     * @param limit Desired number of locations in the response\r\n     * @return List of matching locations no larger than the specified size\r\n     */\r\n    protected fun selectLocationsByName(needle: String, limit: Long): List<Location> =\r\n        queries.selectLocationsByName(\r\n            needle,\r\n            limit,\r\n            mapper = { id, name -> Location(id, name) }\r\n        ).executeAsList()\r\n\r\n    /**\r\n     * Tries to update route record; if it doesn't exist, inserts it.\r\n     *\r\n     * @param route Updated/inserted route\r\n     * @param fromLocationName Origin location name\r\n     * @param toLocationName Destination location name\r\n     * @param languageCode Two-letter code accordingly ISO 639-1\r\n     */\r\n    protected fun updateOrInsertRoute(\r\n        route: Route,\r\n        fromLocationName: String,\r\n        toLocationName: String,\r\n        languageCode: String\r\n    ) {\r\n        val (type, price, duration, paths) = route\r\n        val typeName = type.name\r\n\r\n        // wrapped in transaction, due to associated path records are deleted\r\n        // and inserted at the same time.\r\n        queries.transaction {\r\n            val routeId =\r\n                // the method violates the expected order of the arguments\r\n                updateOrInsertRouteAndGetId(\r\n                    price,\r\n                    duration,\r\n                    typeName,\r\n                    fromLocationName,\r\n                    toLocationName,\r\n                    languageCode\r\n                )\r\n\r\n            deletePathsByRouteId(routeId)\r\n\r\n            paths.forEach { path: Path ->\r\n                insertPath(path, routeId)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds routes by origin/destination locations.\r\n     *\r\n     * @param fromLocationName Origin location name\r\n     * @param toLocationName Destination location name\r\n     * @param languageCode Two-letter code accordingly ISO 639-1\r\n     */\r\n    protected fun selectRoutesByLocations(\r\n        fromLocationName: String,\r\n        toLocationName: String,\r\n        languageCode: String\r\n    ): List<Route> =\r\n        queries.selectRoutesByLocations(\r\n            fromLocationName,\r\n            toLocationName,\r\n            languageCode,\r\n            mapper = { id, type, price, duration ->\r\n                Route(Type.valueOf(type), price, duration, selectPathsByRouteId(id))\r\n            }\r\n        ).executeAsList()\r\n\r\n    private fun updateOrInsertRouteAndGetId(\r\n        price: Float,\r\n        duration: Int,\r\n        typeName: String,\r\n        fromLocationName: String,\r\n        toLocationName: String,\r\n        languageCode: String\r\n    ): Long {\r\n        queries.updateOrInsertRoute(\r\n            price,\r\n            duration,\r\n            typeName,\r\n            fromLocationName,\r\n            toLocationName,\r\n            languageCode\r\n        )\r\n\r\n        return queries.selectRouteId(\r\n            typeName,\r\n            fromLocationName,\r\n            toLocationName,\r\n            languageCode\r\n        ).executeAsOne()\r\n    }\r\n\r\n    private fun selectRouteId(\r\n        typeName: String,\r\n        fromLocationName: String,\r\n        toLocationName: String,\r\n        languageCode: String\r\n    ): Long =\r\n        queries.selectRouteId(\r\n            typeName,\r\n            fromLocationName,\r\n            toLocationName,\r\n            languageCode\r\n        ).executeAsOne()\r\n\r\n    private fun deletePathsByRouteId(routeId: Long) {\r\n        queries.deletePathsByRouteId(routeId)\r\n    }\r\n\r\n    private fun insertPath(path: Path, routeId: Long) {\r\n        val (transportationType, price, duration, fromLocationName, toLocationName) = path\r\n        val transportationTypeName = transportationType.name\r\n\r\n        queries.insertPath(\r\n            transportationTypeName,\r\n            price,\r\n            duration,\r\n            fromLocationName,\r\n            toLocationName,\r\n            routeId\r\n        )\r\n    }\r\n\r\n    private fun selectPathsByRouteId(routeId: Long): List<Path> =\r\n        queries.selectPathsByRouteId(\r\n            routeId,\r\n            mapper = { transportationType,\r\n                       price,\r\n                       duration,\r\n                       fromLocationName,\r\n                       toLocationName ->\r\n                Path(\r\n                    TransportationType.valueOf(transportationType),\r\n                    price,\r\n                    duration,\r\n                    fromLocationName,\r\n                    toLocationName\r\n                )\r\n            }\r\n        ).executeAsList()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocalDbStorage.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocalDbStorage.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocalDbStorage.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocalDbStorage.kt	(date 1682764619736)
@@ -2,15 +2,15 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence
 
 import com.squareup.sqldelight.db.SqlDriver
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataStorage
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataStorage
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Path
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route.Type
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.TransportationType
 
 /**
  * Declares data storage based on local database.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationDb.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\n\r\n/**\r\n * Declares locations storage implementation.\r\n *\r\n * @param sqlDriver A platform-specific implementation of the SQLite driver.\r\n */\r\nclass LocationDb(sqlDriver: SqlDriver) : LocalDbStorage<Location>(sqlDriver) {\r\n    override fun put(data: List<Location>, parameters: ParamsBundle) {\r\n        val type = parameters.get(Key.TYPE) as Location.Type\r\n        val locale = parameters.get(Key.LOCALE) as Locale\r\n\r\n        data.forEach { location: Location ->\r\n            updateOrInsertLocation(location, type.name, locale.languageCode)\r\n        }\r\n    }\r\n\r\n    override fun get(parameters: ParamsBundle): List<Location> {\r\n        val needle = parameters.get(Key.NEEDLE) as String\r\n        val limit = parameters.get(Key.LIMIT) as Int\r\n\r\n        return selectLocationsByName(needle, limit.toLong())\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationDb.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationDb.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationDb.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/persistence/LocationDb.kt	(date 1682764620333)
@@ -2,13 +2,13 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence
 
 import com.squareup.sqldelight.db.SqlDriver
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.Key
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
 
 /**
  * Declares locations storage implementation.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/RouteDataSourceFullDb.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type.*\r\n\r\n// TODO mark deprecate and/or remove, issue #1\r\n/**\r\n * Declares routes data source implementation based on a copy of the server DB.\r\n *\r\n * @param sqlDriver A platform-specific implementation of the SQLite driver.\r\n */\r\nclass RouteDataSourceFullDb(sqlDriver: SqlDriver) : FullDbDataSource<Route>(sqlDriver) {\r\n    override fun get(parameters: ParamsBundle): List<Route> {\r\n        val fromLocation = parameters.get(Key.FROM) as Location\r\n        val toLocation = parameters.get(Key.TO) as Location\r\n        val locale = parameters.get(Key.LOCALE) as Locale\r\n\r\n        return listOf(\r\n            selectRoutes(GROUND)(fromLocation, toLocation, locale),\r\n            selectRoutes(MIXED)(fromLocation, toLocation, locale),\r\n            selectRoutes(FLYING)(fromLocation, toLocation, locale),\r\n            selectRoutes(FIXED_WITHOUT_RIDE_SHARE)(fromLocation, toLocation, locale),\r\n            selectRoutes(WITHOUT_RIDE_SHARE)(fromLocation, toLocation, locale),\r\n            selectRoutes(DIRECT)(fromLocation, toLocation, locale)\r\n        ).mergeUniqueBy { it.directPaths }.sortedBy { it.euroPrice }\r\n    }\r\n\r\n    private fun <T> List<List<Route>>.mergeUniqueBy(selector: (Route) -> T): List<Route> =\r\n        this.flatten().distinctBy(selector)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/RouteDataSourceFullDb.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/RouteDataSourceFullDb.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/RouteDataSourceFullDb.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/RouteDataSourceFullDb.kt	(date 1682764620008)
@@ -2,15 +2,15 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource
 
 import com.squareup.sqldelight.db.SqlDriver
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route.Type.*
 
 // TODO mark deprecate and/or remove, issue #1
 /**
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/FullDbDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale.RU\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type.*\r\nimport kotlin.math.round\r\n\r\n// TODO mark deprecate and/or remove, issue #1\r\n/**\r\n * Declares data source implementation based on a copy of the server DB.\r\n *\r\n * @param sqlDriver A platform-specific implementation of the SQLite driver.\r\n */\r\nabstract class FullDbDataSource<T>(sqlDriver: SqlDriver) : DataSource<T> {\r\n    private val queries = FullDb(sqlDriver).fullDbQueries\r\n\r\n    /**\r\n     * Selects locations that have search string in their name.\r\n     *\r\n     * @param needle Search string\r\n     * @param locale Desired results language\r\n     * @return List of matching locations no larger than the specified size\r\n     */\r\n    protected fun selectLocationsByNameIncluding(\r\n        needle: String,\r\n        locale: Locale\r\n    ): List<Location> =\r\n        queries.selectLocationsByName(\r\n            needle,\r\n            mapper = locationMapper(locale)\r\n        ).executeAsList()\r\n\r\n    private fun locationMapper(locale: Locale): (Int, String, String) -> Location =\r\n        { id: Int, name: String, nameRu: String ->\r\n            Location(\r\n                id = id,\r\n                name = pickOut(locale)(name, nameRu)\r\n            )\r\n        }\r\n\r\n    private fun pickOut(locale: Locale): (String, String) -> String =\r\n        { name, nameRu ->\r\n            when (locale) {\r\n                RU -> nameRu\r\n                else -> name\r\n            }\r\n        }\r\n\r\n    /**\r\n     * Selects locations IDs that are origin of the routes.\r\n     *\r\n     * @return List of all suitable locations IDs\r\n     */\r\n    protected fun selectFromIdsOfRoutes(): List<Int> =\r\n        queries.selectFromIdsOfRoutes().executeAsList()\r\n\r\n    /**\r\n     * Selects locations IDs that are destination of the routes.\r\n     *\r\n     * @return List of all suitable locations IDs\r\n     */\r\n    protected fun selectToIdsOfRoutes(): List<Int> =\r\n        queries.selectToIdsOfRoutes().executeAsList()\r\n\r\n    /**\r\n     * Provides function that finds possible routes required type between from/to locations.\r\n     *\r\n     * Returned function has the signature: (from: Location, to: Location, locale: Locale), where\r\n     * \"from\" is origin location, \"to\" is destination location, \"locale\" is desired results language.\r\n     * Function return list of matching routes (currying by route type applied).\r\n     *\r\n     * @param type Needed route type\r\n     * @return Function of select that do query the suitable table\r\n     */\r\n    protected fun selectRoutes(\r\n        type: Route.Type\r\n    ): (from: Location, to: Location, locale: Locale) -> List<Route> =\r\n        when (type) {\r\n            GROUND -> { from: Location, to: Location, locale: Locale ->\r\n                queries.selectFixedRoutes(\r\n                    from.id,\r\n                    to.id,\r\n                    mapper = routeMapper(GROUND, locale)\r\n                ).executeAsList()\r\n            }\r\n            MIXED -> { from: Location, to: Location, locale: Locale ->\r\n                queries.selectMixedRoutes(\r\n                    from.id,\r\n                    to.id,\r\n                    mapper = routeMapper(MIXED, locale)\r\n                ).executeAsList()\r\n            }\r\n            FLYING -> { from: Location, to: Location, locale: Locale ->\r\n                queries.selectFlyingRoutes(\r\n                    from.id,\r\n                    to.id,\r\n                    mapper = routeMapper(FLYING, locale)\r\n                ).executeAsList()\r\n            }\r\n            FIXED_WITHOUT_RIDE_SHARE -> { from: Location, to: Location, locale: Locale ->\r\n                queries.selectFixedRoutesWithoutRideShare(\r\n                    from.id,\r\n                    to.id,\r\n                    mapper = routeMapper(FIXED_WITHOUT_RIDE_SHARE, locale)\r\n                ).executeAsList()\r\n            }\r\n            WITHOUT_RIDE_SHARE -> { from: Location, to: Location, locale: Locale ->\r\n                queries.selectRoutesWithoutRideShare(\r\n                    from.id,\r\n                    to.id,\r\n                    mapper = routeMapper(WITHOUT_RIDE_SHARE, locale)\r\n                ).executeAsList()\r\n            }\r\n            DIRECT -> { from: Location, to: Location, locale: Locale ->\r\n                queries.selectDirectPaths(\r\n                    from.id,\r\n                    to.id,\r\n                    // a custom mapper is used since the direct route is the single path itself\r\n                    mapper = { id, fromId, toId, transportationTypeId, price, duration ->\r\n                        Route(\r\n                            routeType = DIRECT,\r\n                            euroPrice = round(price*100)/100,\r\n                            durationMinutes = duration!!,\r\n                            directPaths = listOf(\r\n                                pathMapper(locale)(\r\n                                    id,\r\n                                    fromId,\r\n                                    toId,\r\n                                    transportationTypeId,\r\n                                    price,\r\n                                    duration\r\n                                )\r\n                            )\r\n                        )\r\n                    }\r\n                ).executeAsList()\r\n            }\r\n        }\r\n\r\n    private fun routeMapper(\r\n        type: Route.Type,\r\n        locale: Locale\r\n    ): (Int, Int, Int, Float, String) -> Route =\r\n        { _: Int, _: Int, _: Int, price: Float, travelData: String ->\r\n            // The travelData DB field contains a comma-separated list of paths IDs,\r\n            // sorted by the order in which the route was planned.\r\n            val pathIds = travelData.split(\",\").map { it.toInt() }\r\n            val paths = selectPathsByIds(pathIds, locale).sortByListOrder(pathIds)\r\n            Route(\r\n                routeType = type,\r\n                euroPrice = round(price*100)/100,\r\n                durationMinutes = paths.sumOf { it.durationMinutes },\r\n                directPaths = paths\r\n            )\r\n        }\r\n\r\n    private fun selectPathsByIds(pathIds: List<Int>, locale: Locale): List<Path> =\r\n        queries.selectPathsByIds(\r\n            pathIds,\r\n            mapper = pathMapper(locale)\r\n        ).executeAsList()\r\n\r\n    private fun List<Path>.sortByListOrder(list: List<Int>): List<Path> {\r\n        val reSortedIndexes = list.withIndex().sortedBy { it.value }.map { it.index }\r\n        return this.withIndex().sortedBy { reSortedIndexes[it.index] }.map { it.value }\r\n    }\r\n\r\n    private fun pathMapper(locale: Locale): (Int, Int, Int, Int?, Float, Int?) -> Path =\r\n        { _: Int, fromId: Int, toId: Int, transportationTypeId: Int?, price: Float, duration: Int? ->\r\n            Path(\r\n                transportationType = TransportationType.fromValue(\r\n                    selectTransportationTypeNameById(transportationTypeId!!)\r\n                ),\r\n                euroPrice = round(price*100)/100,\r\n                durationMinutes = duration!!,\r\n                from = selectLocationNameById(fromId, locale),\r\n                to = selectLocationNameById(toId, locale)\r\n            )\r\n        }\r\n\r\n    private fun selectTransportationTypeNameById(id: Int): String =\r\n        queries.selectTransportationTypeNameById(id).executeAsOne()\r\n\r\n    private fun selectLocationNameById(id: Int, locale: Locale): String =\r\n        queries.selectLocationNamesById(\r\n            id,\r\n            mapper = { name, nameRu -> pickOut(locale)(name, nameRu) }\r\n        ).executeAsOne()\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/FullDbDataSource.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/FullDbDataSource.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/FullDbDataSource.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/FullDbDataSource.kt	(date 1682764619496)
@@ -2,13 +2,13 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource
 
 import com.squareup.sqldelight.db.SqlDriver
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale.RU
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale.RU
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route.Type.*
 import kotlin.math.round
 
 // TODO mark deprecate and/or remove, issue #1
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/LocationDataSourceFullDb.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type.*\r\n\r\n// TODO mark deprecate and/or remove, issue #1\r\n/**\r\n * Declares locations data source implementation based on a copy of the server DB.\r\n *\r\n * @param sqlDriver A platform-specific implementation of the SQLite driver.\r\n */\r\nclass LocationDataSourceFullDb(sqlDriver: SqlDriver) : FullDbDataSource<Location>(sqlDriver) {\r\n    override fun get(parameters: ParamsBundle): List<Location> {\r\n        val needle = parameters.get(Key.NEEDLE) as String\r\n        val type = parameters.get(Key.TYPE) as Type\r\n        val limit = parameters.get(Key.LIMIT) as Int\r\n        val locale = parameters.get(Key.LOCALE) as Locale\r\n\r\n        return selectLocationsByNameIncluding(\r\n            needle,\r\n            locale\r\n        ).filterByType(type).sortedByIncluding(needle).take(limit)\r\n    }\r\n\r\n    private fun List<Location>.filterByType(type: Type): List<Location> =\r\n        when (type) {\r\n            ALL -> this // no filtration required\r\n            FROM -> {\r\n                val fromLocationIds = selectFromIdsOfRoutes()\r\n                this.filter { (id) -> fromLocationIds.contains(id) }\r\n            }\r\n            TO -> {\r\n                val toLocationIds = selectToIdsOfRoutes()\r\n                this.filter { (id) -> toLocationIds.contains(id) }\r\n            }\r\n        }\r\n\r\n    private fun List<Location>.sortedByIncluding(needle: String): List<Location> {\r\n        val (startWithNeedle, containNeedle) = this.partition {\r\n            it.name.startsWith(needle, ignoreCase = true)\r\n        }\r\n\r\n        return listOf(startWithNeedle, containNeedle).flatten()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/LocationDataSourceFullDb.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/LocationDataSourceFullDb.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/LocationDataSourceFullDb.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/infrastructure/datasource/LocationDataSourceFullDb.kt	(date 1682764620516)
@@ -2,15 +2,15 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource
+package ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource
 
 import com.squareup.sqldelight.db.SqlDriver
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle.Key
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location.Type.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle.Key
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location.Type
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location.Type.*
 
 // TODO mark deprecate and/or remove, issue #1
 /**
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Transport.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n@kotlinx.serialization.Serializable\r\ndata class Transport(\r\n    val name: String\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Transport.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Transport.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Transport.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/Transport.kt	(date 1682764620133)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 @kotlinx.serialization.Serializable
 data class Transport(
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/TransportationType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared.model.data\r\n\r\n\r\nimport dev.icerock.moko.resources.ImageResource\r\nimport dev.icerock.moko.resources.StringResource\r\nimport dev.icerock.moko.resources.desc.Resource\r\nimport dev.icerock.moko.resources.desc.StringDesc\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.convertToString\r\n\r\n/**\r\n * Declares path type in relation to transport.\r\n *\r\n * @property value String representation for JSON conversion\r\n * @param stringResourceId Resource ID for string representation into UI\r\n * @property imageResource Resource ID for image representation into UI\r\n */\r\nenum class TransportationType(\r\n    val value: String,\r\n    private val stringResourceId: StringResource,\r\n    val imageResource: ImageResource\r\n) {\r\n    FLIGHT(\"Flight\", MR.strings.transportation_type_flight, MR.images.ic_plane),\r\n    BUS(\"Bus\", MR.strings.transportation_type_bus, MR.images.ic_bus),\r\n    TRAIN(\"Train\", MR.strings.transportation_type_train, MR.images.ic_train),\r\n    CAR_DRIVE(\"Car Drive\", MR.strings.transportation_type_car_drive, MR.images.ic_car_drive),\r\n    TAXI(\"Taxi\", MR.strings.transportation_type_taxi, MR.images.ic_taxi),\r\n    WALK(\"Walk\", MR.strings.transportation_type_walk, MR.images.ic_walk),\r\n    TOWN_CAR(\"Town Car\", MR.strings.transportation_type_town_car, MR.images.ic_town_car),\r\n    RIDE_SHARE(\"Ride Share\", MR.strings.transportation_type_ride_share, MR.images.ic_ride_share),\r\n    SHUTTLE(\"Shuttle\", MR.strings.transportation_type_shuttle, MR.images.ic_shuttle),\r\n    FERRY(\"Ferry\", MR.strings.transportation_type_ferry, MR.images.ic_ferry),\r\n    SUBWAY(\"Subway\", MR.strings.transportation_type_subway, MR.images.ic_subway),\r\n    UNDEFINED(\"Undefined\", MR.strings.transportation_type_undefined, MR.images.ic_undefined);\r\n\r\n    override fun toString(): String {\r\n        return StringDesc.Resource(stringResourceId).convertToString()\r\n    }\r\n\r\n    companion object {\r\n        /**\r\n         * Gives the transportation type by its value.\r\n         *\r\n         * @param value Value of type\r\n         * @return Appropriate transportation type\r\n         */\r\n        infix fun fromValue(value: String?) = values().find { it.value == value } ?: UNDEFINED\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/TransportationType.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/TransportationType.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/TransportationType.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/model/data/TransportationType.kt	(date 1682764619852)
@@ -2,14 +2,14 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared.model.data
+package ru.z8.louttsev.bustrainflightmobile.androidApp.model.data
 
 
 import dev.icerock.moko.resources.ImageResource
 import dev.icerock.moko.resources.StringResource
 import dev.icerock.moko.resources.desc.Resource
 import dev.icerock.moko.resources.desc.StringDesc
-import ru.z8.louttsev.bustrainflightmobile.shared.convertToString
+import ru.z8.louttsev.bustrainflightmobile.androidApp.convertToString
 
 /**
  * Declares path type in relation to transport.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nexpect object FileUtils {\r\n    fun readTextFile(filePath: String): String\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt	(date 1682764619973)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 expect object FileUtils {
     fun readTextFile(filePath: String): String
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport kotlin.coroutines.CoroutineContext\r\n\r\n/**\r\n * A platform-specific property declaration for I/O dispatcher.\r\n */\r\nexpect val ioDispatcher: CoroutineContext\r\n\r\n/**\r\n * A platform-specific property declaration for UI dispatcher.\r\n */\r\nexpect val uiDispatcher: CoroutineContext\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt	(date 1682764620214)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import kotlin.coroutines.CoroutineContext
 
Index: shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\n\r\n/**\r\n * A platform-specific property implementation for default language.\r\n */\r\nactual val currentLocale: Locale\r\n    // TODO change implementation to use the saved user select as the current locale, issue #13\r\n    get() = TODO(\"Not yet implemented, issue#25\")\r\n\r\n// TODO implement val currentCountry, issue #3
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt
--- a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt	(date 1682764620281)
@@ -2,9 +2,9 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
 
 /**
  * A platform-specific property implementation for default language.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\n\r\n/**\r\n * A platform-specific declaration of the SQLite driver factory.\r\n */\r\nexpect class DatabaseDriverFactory {\r\n    /**\r\n     * Provides implementation of platform-specific SQL driver for new database.\r\n     *\r\n     * @param schema Database schema\r\n     * @param fileName Local file for database storage\r\n     * @return Object to create database and run statements on it\r\n     */\r\n    fun createDriver(schema: SqlDriver.Schema, fileName: String): SqlDriver\r\n\r\n    // TODO mark deprecate and/or remove, issue #1\r\n    /**\r\n     * Provides implementation of platform-specific SQL driver for pre-populated database.\r\n     *\r\n     * @param schema Database schema\r\n     * @param fileName Local file for database storage\r\n     * @return Object to create database and run statements on it\r\n     */\r\n    fun getDriver(schema: SqlDriver.Schema, fileName: String): SqlDriver\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt	(date 1682764620385)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import com.squareup.sqldelight.db.SqlDriver
 
Index: shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\n\r\n// TODO Implement\r\nactual class ResourceReader {\r\n    actual fun readResource(name: String) = \"\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt
--- a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt	(date 1682764620505)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 
 // TODO Implement
Index: shared/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget\r\nimport java.io.BufferedInputStream\r\nimport java.io.FileInputStream\r\nimport java.security.DigestInputStream\r\nimport java.security.MessageDigest\r\n\r\nplugins {\r\n    kotlin(\"multiplatform\")\r\n    id(\"com.android.library\")\r\n    id(\"dev.icerock.mobile.multiplatform-resources\")\r\n    id(\"com.squareup.sqldelight\")\r\n    kotlin(\"plugin.serialization\") version \"1.6.21\"\r\n}\r\n\r\nkotlin {\r\n    android()\r\n    ios {\r\n        binaries {\r\n            framework {\r\n                baseName = \"shared\"\r\n            }\r\n        }\r\n    }\r\n    sourceSets {\r\n        val commonMain by getting {\r\n            dependencies {\r\n                implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0\")\r\n                api(\"dev.icerock.moko:resources:0.21.1\")\r\n                api(\"dev.icerock.moko:mvvm-core:0.11.0\")\r\n                api(\"dev.icerock.moko:mvvm-livedata:0.11.0\")\r\n                implementation(\"com.squareup.sqldelight:runtime:1.4.4\")\r\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1\")\r\n\r\n                implementation(\"io.github.aakira:napier:2.6.1\")\r\n                implementation(\"io.insert-koin:koin-core:3.2.0\")\r\n                // temporary fix of https://youtrack.jetbrains.com/issue/KT-41083\r\n                implementation(\"dev.icerock.moko:parcelize:0.4.0\")\r\n                implementation(\"dev.icerock.moko:graphics:0.4.0\")\r\n            }\r\n        }\r\n        val commonTest by getting {\r\n            dependencies {\r\n                implementation(kotlin(\"test-common\"))\r\n                implementation(kotlin(\"test-annotations-common\"))\r\n            }\r\n        }\r\n        val androidMain by getting {\r\n            dependencies {\r\n                implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2\")\r\n                implementation(\"com.google.android.material:material:1.4.0\")\r\n                implementation(\"androidx.lifecycle:lifecycle-livedata-ktx:2.3.1\")\r\n                implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1\")\r\n                api(\"dev.icerock.moko:mvvm-livedata-material:0.11.0\")\r\n                api(\"dev.icerock.moko:mvvm-databinding:0.11.0\")\r\n                api(\"dev.icerock.moko:mvvm-viewbinding:0.11.0\")\r\n                implementation(\"com.squareup.sqldelight:android-driver:1.4.4\")\r\n                implementation(\"io.insert-koin:koin-android:3.2.0\")\r\n            }\r\n        }\r\n        val androidTest by getting {\r\n            dependencies {\r\n                implementation(kotlin(\"test-junit\"))\r\n                implementation(\"junit:junit:4.13.2\")\r\n                implementation(\"androidx.test:core:1.4.0\")\r\n                implementation(\"com.android.support:support-annotations:28.0.0\")\r\n                implementation(\"com.android.support.test:runner:1.0.2\")\r\n                implementation(\"org.robolectric:robolectric:4.4\")\r\n            }\r\n        }\r\n        val iosMain by getting {\r\n            dependencies {\r\n                // TODO define the appropriate library dependency for coroutines, issue #25\r\n                implementation(\"com.squareup.sqldelight:native-driver:1.4.4\")\r\n            }\r\n        }\r\n        val iosTest by getting\r\n    }\r\n    // export correct artifact to use all classes of library directly from Swift\r\n    targets.withType(KotlinNativeTarget::class.java).all {\r\n/*        val arch = when (this.konanTarget) {\r\n            org.jetbrains.kotlin.konan.target.KonanTarget.IOS_ARM64 -> \"iosarm64\"\r\n            org.jetbrains.kotlin.konan.target.KonanTarget.IOS_X64 -> \"iosx64\"\r\n            else -> throw IllegalArgumentException()\r\n        }*/\r\n        binaries.withType(org.jetbrains.kotlin.gradle.plugin.mpp.Framework::class.java).all {\r\n//            export(\"dev.icerock.moko:mvvm-$arch:0.11.0\")\r\n            export(\"dev.icerock.moko:mvvm-core:0.11.0\")\r\n            export(\"dev.icerock.moko:mvvm-livedata:0.11.0\")\r\n        }\r\n    }\r\n}\r\n\r\nfun getMd5EncryptedString(file: File): String = DigestInputStream(\r\n    BufferedInputStream(FileInputStream(file)),\r\n    MessageDigest.getInstance(\"MD5\")\r\n).use {\r\n    @Suppress(\"ControlFlowWithEmptyBody\")\r\n    while (it.read() != -1) { }\r\n\r\n    it.messageDigest.digest()\r\n        .map { String.format(\"%02x\", it) }\r\n        .reduce { result, string -> result + string }\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion(33)\r\n    sourceSets[\"main\"].manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\r\n    sourceSets[\"main\"].resources.setSrcDirs(\r\n        listOf(\r\n            \"src/androidMain/resources\",\r\n            \"src/commonMain/resources\" // <-- add the commonMain Resources\r\n        )\r\n    )\r\n    defaultConfig {\r\n        minSdkVersion(21)\r\n        targetSdkVersion(33)\r\n\r\n//        val dbFile = File(\"shared/src/commonMain/resources/MR/files/fullDb.sqlite3\")\r\n//        val checkCode = getMd5EncryptedString(dbFile)\r\n//        buildConfigField(\"String\", \"DB_FILE_CHECK_CODE\", \"\\\"$checkCode\\\"\")\r\n    }\r\n    buildFeatures {\r\n        viewBinding = true\r\n        dataBinding = true\r\n    }\r\n    testOptions {\r\n        unitTests {\r\n            isReturnDefaultValues = true\r\n            isIncludeAndroidResources = true\r\n        }\r\n    }\r\n}\r\n\r\nmultiplatformResources {\r\n    multiplatformResourcesPackage = \"ru.z8.louttsev.bustrainflightmobile\"\r\n}\r\n\r\nsqldelight {\r\n    database(\"LocalDb\") {\r\n        packageName = \"ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence\"\r\n        sourceFolders = listOf(\"sqldelightLocalDb\")\r\n    }\r\n    database(\"FullDb\") {\r\n        packageName = \"ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource\"\r\n        sourceFolders = listOf(\"sqldelightFullDb\")\r\n    }\r\n}\r\n\r\nval packForXcode by tasks.creating(Sync::class) {\r\n    group = \"build\"\r\n    val mode = System.getenv(\"CONFIGURATION\") ?: \"DEBUG\"\r\n    val sdkName = System.getenv(\"SDK_NAME\") ?: \"iphonesimulator\"\r\n    val targetName = \"ios\" + if (sdkName.startsWith(\"iphoneos\")) \"Arm64\" else \"X64\"\r\n    val framework =\r\n        kotlin.targets.getByName<KotlinNativeTarget>(targetName).binaries.getFramework(mode)\r\n    inputs.property(\"mode\", mode)\r\n    dependsOn(framework.linkTask)\r\n    val targetDir = File(buildDir, \"xcode-frameworks\")\r\n    from({ framework.outputDirectory })\r\n    into(targetDir)\r\n}\r\n\r\ntasks.getByName(\"build\").dependsOn(packForXcode)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/build.gradle.kts b/shared/build.gradle.kts
--- a/shared/build.gradle.kts	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/build.gradle.kts	(date 1682764619567)
@@ -137,11 +137,11 @@
 
 sqldelight {
     database("LocalDb") {
-        packageName = "ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence"
+        packageName = "ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence"
         sourceFolders = listOf("sqldelightLocalDb")
     }
     database("FullDb") {
-        packageName = "ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource"
+        packageName = "ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource"
         sourceFolders = listOf("sqldelightFullDb")
     }
 }
Index: shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport dev.icerock.moko.resources.desc.StringDesc\r\n\r\n/**\r\n * A platform-specific conversion implementation for common string resources.\r\n */\r\nactual var convertToString: StringDesc.() -> String = { localized() }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt
--- a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt	(date 1682764619828)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import dev.icerock.moko.resources.desc.StringDesc
 
Index: shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\n\r\n//TODO implement\r\n\r\nactual object FileUtils {\r\n    actual fun readTextFile(filePath: String): String = \"\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt
--- a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/FileUtils.kt	(date 1682764619805)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 
 //TODO implement
Index: shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport com.squareup.sqldelight.db.SqlDriver\r\n\r\n/**\r\n * A platform-specific implementation of the SQLite driver factory.\r\n */\r\nactual class DatabaseDriverFactory {\r\n    actual fun createDriver(schema: SqlDriver.Schema, fileName: String): SqlDriver {\r\n        TODO(\"Not yet implemented, issue #25\")\r\n    }\r\n\r\n    // TODO mark deprecate and/or remove, issue #1\r\n    actual fun getDriver(schema: SqlDriver.Schema, fileName: String): SqlDriver {\r\n        TODO(\"Not yet implemented, issue #25\")\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt
--- a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt	(date 1682764620202)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import com.squareup.sqldelight.db.SqlDriver
 
Index: shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport kotlin.coroutines.CoroutineContext\r\n\r\n/**\r\n * A platform-specific property implementation for I/O dispatcher.\r\n */\r\nactual val ioDispatcher: CoroutineContext\r\n    get() = TODO(\"Not yet implemented, issue #25\")\r\n\r\n/**\r\n * A platform-specific property implementation for UI dispatcher.\r\n */\r\nactual val uiDispatcher: CoroutineContext\r\n    get() = TODO(\"Not yet implemented, issue #25\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt
--- a/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/iosMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt	(date 1682764620371)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import kotlin.coroutines.CoroutineContext
 
Index: shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/LocationRepositoryTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport android.content.Context\r\nimport android.support.test.runner.AndroidJUnit4\r\nimport androidx.test.core.app.ApplicationProvider\r\nimport org.junit.runner.RunWith\r\nimport org.robolectric.annotation.Config\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.FullDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.FullDbDataSource\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.LocationDataSourceFullDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDbStorage\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocationDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.LocationRepository\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport kotlin.test.Test\r\nimport kotlin.test.assertEquals\r\nimport kotlin.test.assertTrue\r\n\r\n@Config(sdk = [24])\r\n@RunWith(AndroidJUnit4::class)\r\nclass LocationRepositoryTest {\r\n    private val dataSourceWrapper = object : DataSource<Location> {\r\n        private val dataSource: FullDbDataSource<Location>\r\n\r\n        init {\r\n            val context = ApplicationProvider.getApplicationContext<Context>()\r\n            val driver = DatabaseDriverFactory(context).getDriver(FullDb.Schema, \"fullDb.sqlite3\")\r\n            dataSource = LocationDataSourceFullDb(driver)\r\n        }\r\n\r\n        var isAvailable = true\r\n\r\n        override fun get(parameters: ParamsBundle): List<Location>? =\r\n            if (isAvailable) {\r\n                dataSource.get(parameters)\r\n            } else {\r\n                null\r\n            }\r\n    }\r\n\r\n    private val dataStorage: LocalDbStorage<Location>\r\n\r\n    init {\r\n        val context = ApplicationProvider.getApplicationContext<Context>()\r\n        val driver = DatabaseDriverFactory(context).createDriver(LocalDb.Schema, \"localDb.sqlite3\")\r\n        dataStorage = LocationDb(driver)\r\n    }\r\n\r\n    private val repositoryUnderTest = LocationRepository(\r\n        dataSourceWrapper,\r\n        dataStorage,\r\n        RepositoryStrategy.CACHING\r\n    )\r\n\r\n    @Test\r\n    fun searchLocationsByName() {\r\n        val expectedResult = listOf(\r\n            Location(254, \"Monte Carlo\"),\r\n            Location(261, \"Montpellier\"),\r\n            Location(387, \"Moscow\"),\r\n            Location(759, \"Modesto\"),\r\n            Location(766, \"Moreno Valley\"),\r\n            Location(780, \"Montreal\"),\r\n            Location(121, \"Bournemouth\"),\r\n            Location(154, \"Clermont-Ferrand\"),\r\n            Location(262, \"Malmo\"),\r\n            Location(281, \"Plymouth\")\r\n        )\r\n\r\n        assertTrue(dataSourceWrapper.isAvailable)\r\n        val result: List<Location> =\r\n            repositoryUnderTest.searchLocationsByName(needle = \"Mo\", locale = Locale.EN)\r\n        assertEquals(expectedResult, result)\r\n        dataSourceWrapper.isAvailable = false\r\n        val cachedResult: List<Location> =\r\n            repositoryUnderTest.searchLocationsByName(needle = \"Mo\", locale = Locale.EN)\r\n        assertEquals(expectedResult, cachedResult)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/LocationRepositoryTest.kt b/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/LocationRepositoryTest.kt
--- a/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/LocationRepositoryTest.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/LocationRepositoryTest.kt	(date 1682764619983)
@@ -1,22 +1,22 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import android.content.Context
 import android.support.test.runner.AndroidJUnit4
 import androidx.test.core.app.ApplicationProvider
 import org.junit.runner.RunWith
 import org.robolectric.annotation.Config
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.FullDb
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.FullDbDataSource
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.LocationDataSourceFullDb
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDb
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDbStorage
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocationDb
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.LocationRepository
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource.FullDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource.FullDbDataSource
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource.LocationDataSourceFullDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocalDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocalDbStorage
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocationDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.LocationRepository
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RepositoryStrategy
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
 import kotlin.test.Test
 import kotlin.test.assertEquals
 import kotlin.test.assertTrue
Index: shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/RouteRepositoryTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport android.content.Context\r\nimport android.support.test.runner.AndroidJUnit4\r\nimport androidx.test.core.app.ApplicationProvider\r\nimport org.junit.runner.RunWith\r\nimport org.robolectric.annotation.Config\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.FullDbDataSource\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.RouteDataSourceFullDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDbStorage\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.RouteDb\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.RouteRepository\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type.*\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType.*\r\nimport kotlin.test.Test\r\nimport kotlin.test.assertEquals\r\nimport kotlin.test.assertTrue\r\n\r\n@Config(sdk = [24])\r\n@RunWith(AndroidJUnit4::class)\r\nclass RouteRepositoryTest {\r\n    private val dataSourceWrapper = object : DataSource<Route> {\r\n        private val dataSource: FullDbDataSource<Route>\r\n\r\n        init {\r\n            val context = ApplicationProvider.getApplicationContext<Context>()\r\n            val driver = DatabaseDriverFactory(context).getDriver(LocalDb.Schema, \"fullDb.sqlite3\")\r\n            dataSource = RouteDataSourceFullDb(driver)\r\n        }\r\n\r\n        var isAvailable: Boolean = true\r\n\r\n        override fun get(parameters: ParamsBundle): List<Route>? =\r\n            if (isAvailable) {\r\n                dataSource.get(parameters)\r\n            } else {\r\n                null\r\n            }\r\n    }\r\n\r\n    private val dataStorage: LocalDbStorage<Route>\r\n\r\n    init {\r\n        val context = ApplicationProvider.getApplicationContext<Context>()\r\n        val driver = DatabaseDriverFactory(context).createDriver(LocalDb.Schema, \"localDb.sqlite3\")\r\n        dataStorage = RouteDb(driver)\r\n    }\r\n\r\n    private val repositoryUnderTest = RouteRepository(\r\n        dataSourceWrapper,\r\n        dataStorage,\r\n        RepositoryStrategy.CACHING\r\n    )\r\n\r\n    @Test\r\n    fun getRoutes() {\r\n        val fromLocation = Location(387, \"Moscow\")\r\n        val toLocation = Location(388, \"Saint Petersburg\")\r\n\r\n        val expectedResult = listOf(\r\n            Route(\r\n                GROUND,\r\n                15.32F,\r\n                687,\r\n                listOf(Path(RIDE_SHARE, 15.32F, 687, \"Moscow\", \"Saint Petersburg\"))\r\n            ),\r\n            Route(\r\n                FLYING,\r\n                16.43F,\r\n                224,\r\n                listOf(Path(FLIGHT, 16.43F, 224, \"Moscow\", \"Saint Petersburg\"))\r\n            ),\r\n            Route(\r\n                FIXED_WITHOUT_RIDE_SHARE,\r\n                16.83F,\r\n                765,\r\n                listOf(Path(BUS, 16.83F, 765, \"Moscow\", \"Saint Petersburg\"))\r\n            ),\r\n            Route(\r\n                DIRECT,\r\n                17.64F,\r\n                483,\r\n                listOf(Path(TRAIN, 17.64F, 483, \"Moscow\", \"Saint Petersburg\"))\r\n            )\r\n        )\r\n\r\n        assertTrue(dataSourceWrapper.isAvailable)\r\n        val result: List<Route> =\r\n            repositoryUnderTest.getRoutes(fromLocation, toLocation, Locale.EN)\r\n        assertEquals(expectedResult, result)\r\n        dataSourceWrapper.isAvailable = false\r\n        val cachedResult: List<Route> =\r\n            repositoryUnderTest.getRoutes(fromLocation, toLocation, Locale.EN)\r\n        assertEquals(expectedResult, cachedResult)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/RouteRepositoryTest.kt b/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/RouteRepositoryTest.kt
--- a/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/RouteRepositoryTest.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidTest/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/RouteRepositoryTest.kt	(date 1682764619480)
@@ -1,25 +1,25 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import android.content.Context
 import android.support.test.runner.AndroidJUnit4
 import androidx.test.core.app.ApplicationProvider
 import org.junit.runner.RunWith
 import org.robolectric.annotation.Config
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.FullDbDataSource
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.datasource.RouteDataSourceFullDb
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDb
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.LocalDbStorage
-import ru.z8.louttsev.bustrainflightmobile.shared.infrastructure.persistence.RouteDb
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource
-import ru.z8.louttsev.bustrainflightmobile.shared.model.DataSource.ParamsBundle
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RepositoryStrategy
-import ru.z8.louttsev.bustrainflightmobile.shared.model.RouteRepository
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Location
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Path
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Route.Type.*
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.TransportationType.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource.FullDbDataSource
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.datasource.RouteDataSourceFullDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocalDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.LocalDbStorage
+import ru.z8.louttsev.bustrainflightmobile.androidApp.infrastructure.persistence.RouteDb
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.DataSource.ParamsBundle
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RepositoryStrategy
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.RouteRepository
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Location
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Path
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Route.Type.*
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.TransportationType.*
 import kotlin.test.Test
 import kotlin.test.assertEquals
 import kotlin.test.assertTrue
Index: shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport dev.icerock.moko.resources.desc.StringDesc\r\n\r\n/**\r\n * A platform-specific conversion implementation for common string resources.\r\n *\r\n * On androidApp side need change implementation to real using activity/application context.\r\n */\r\nactual var convertToString: StringDesc.() -> String = { \"\" } // stub
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt
--- a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt	(date 1682764619895)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import dev.icerock.moko.resources.desc.StringDesc
 
Index: shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\n\r\n/**\r\n * A platform-specific property implementation for default language.\r\n */\r\nactual val currentLocale: Locale\r\n    // TODO change implementation to use the saved user select as the current locale, issue #13\r\n    get() = Locale.fromLanguageCode(java.util.Locale.getDefault().language)\r\n\r\n// TODO implement val currentCountry, issue #3
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt
--- a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt	(date 1682764619620)
@@ -2,9 +2,9 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
 
 /**
  * A platform-specific property implementation for default language.
Index: shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport java.io.InputStreamReader\r\n\r\n// Android resources are available via the class loader\r\nactual class ResourceReader {\r\n    actual fun readResource(name: String): String =\r\n        javaClass.classLoader!!.getResourceAsStream(name).use { stream ->\r\n            InputStreamReader(stream).use { reader ->\r\n                reader.readText()\r\n            }\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt
--- a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt	(date 1682764619599)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import java.io.InputStreamReader
 
Index: shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport android.content.Context\r\nimport com.squareup.sqldelight.android.AndroidSqliteDriver\r\nimport com.squareup.sqldelight.db.SqlDriver\r\nimport java.io.File\r\n\r\n/**\r\n * A platform-specific implementation of the SQLite driver factory.\r\n */\r\nactual class DatabaseDriverFactory(private val context: Context) {\r\n    actual fun createDriver(schema: SqlDriver.Schema, fileName: String): SqlDriver {\r\n        return AndroidSqliteDriver(schema, context, fileName)\r\n    }\r\n\r\n    // TODO mark deprecate and/or remove, issue #1\r\n    actual fun getDriver(schema: SqlDriver.Schema, fileName: String): SqlDriver {\r\n        val database: File = context.getDatabasePath(fileName)\r\n//        val checkCode = BuildConfig.DB_FILE_CHECK_CODE\r\n//\r\n//        if (!database.exists()) {\r\n//            deployDatabase(database)\r\n//            saveDbCheckCodePreference(checkCode)\r\n//        } else {\r\n//            if (checkCode != loadDbCheckCodePreference()) {\r\n//                database.delete()\r\n//                deployDatabase(database)\r\n//                saveDbCheckCodePreference(checkCode)\r\n//            }\r\n//        }\r\n\r\n        return AndroidSqliteDriver(schema, context, fileName)\r\n    }\r\n\r\n    // TODO mark deprecate and/or remove, issue #1\r\n    private fun deployDatabase(database: File) {\r\n        fun createDirectoryIfNotExist(database: File) {\r\n            val directory = File(database.absolutePath.substringBeforeLast('/'))\r\n\r\n            if (!directory.exists()) {\r\n                directory.mkdir()\r\n            }\r\n        }\r\n\r\n//        val inputStream = context.resources.openRawResource(MR.files.fullDb.rawResId)\r\n\r\n//        createDirectoryIfNotExist(database)\r\n//        val outputStream = FileOutputStream(database.absolutePath)\r\n//\r\n//        inputStream.use { input: InputStream ->\r\n//            outputStream.use { output: FileOutputStream ->\r\n//                input.copyTo(output)\r\n//            }\r\n//        }\r\n    }\r\n\r\n    // TODO mark deprecate and/or remove, issue #1\r\n    @Suppress(\"SameParameterValue\")\r\n    private fun saveDbCheckCodePreference(checkCode: String) {\r\n        context.getSharedPreferences(\"application-settings\", Context.MODE_PRIVATE)\r\n            .edit()\r\n            .putString(\"db-file-check-code\", checkCode)\r\n            .apply()\r\n    }\r\n\r\n    // TODO mark deprecate and/or remove, issue #1\r\n    private fun loadDbCheckCodePreference() =\r\n        context.getSharedPreferences(\"application-settings\", Context.MODE_PRIVATE)\r\n            .getString(\"db-file-check-code\", \"\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt
--- a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Database.kt	(date 1682764619794)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import android.content.Context
 import com.squareup.sqldelight.android.AndroidSqliteDriver
Index: shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlin.coroutines.CoroutineContext\r\n\r\n/**\r\n * A platform-specific property implementation for I/O dispatcher.\r\n */\r\nactual val ioDispatcher: CoroutineContext\r\n    get() = Dispatchers.IO\r\n\r\n/**\r\n * A platform-specific property implementation for UI dispatcher.\r\n */\r\nactual val uiDispatcher: CoroutineContext\r\n    get() = Dispatchers.Main\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt
--- a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Dispatchers.kt	(date 1682764620494)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import kotlinx.coroutines.Dispatchers
 import kotlin.coroutines.CoroutineContext
Index: shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/AndroidFileUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport java.io.File\r\n\r\nactual object FileUtils {\r\n    actual fun readTextFile(filePath: String): String {\r\n        val file = File(filePath)\r\n        return file.readText()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/AndroidFileUtils.kt b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/AndroidFileUtils.kt
--- a/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/AndroidFileUtils.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/AndroidFileUtils.kt	(date 1682764620614)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import java.io.File
 
Index: shared/src/androidMain/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--suppress XmlUnusedNamespaceDeclaration -->\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"ru.z8.louttsev.bustrainflightmobile.shared\"/>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/androidMain/AndroidManifest.xml b/shared/src/androidMain/AndroidManifest.xml
--- a/shared/src/androidMain/AndroidManifest.xml	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/androidMain/AndroidManifest.xml	(date 1682764620397)
@@ -1,3 +1,3 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--suppress XmlUnusedNamespaceDeclaration -->
-<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="ru.z8.louttsev.bustrainflightmobile.shared"/>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="ru.z8.louttsev.bustrainflightmobile.androidApp"/>
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport dev.icerock.moko.resources.desc.StringDesc\r\n\r\n/**\r\n * A platform-specific declaration of conversion for common string resources.\r\n */\r\nexpect var convertToString: StringDesc.() -> String
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/Resources.kt	(date 1682764619721)
@@ -2,7 +2,7 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 import dev.icerock.moko.resources.desc.StringDesc
 
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * CheapTrip Mobile\r\n * This is mobile client for LowCostsTrip server.\r\n */\r\npackage ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nimport ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale\r\n\r\n/**\r\n * A platform-specific property declaration for default language.\r\n */\r\nexpect val currentLocale: Locale\r\n\r\n// TODO declare val currentCountry, issue #3
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/System.kt	(date 1682764620268)
@@ -2,9 +2,9 @@
  * CheapTrip Mobile
  * This is mobile client for LowCostsTrip server.
  */
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
-import ru.z8.louttsev.bustrainflightmobile.shared.model.data.Locale
+import ru.z8.louttsev.bustrainflightmobile.androidApp.model.data.Locale
 
 /**
  * A platform-specific property declaration for default language.
Index: shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.z8.louttsev.bustrainflightmobile.shared\r\n\r\nexpect class ResourceReader() {\r\n    fun readResource(name: String): String\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt
--- a/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt	(revision dac0ad96d8fb614ce296989e55b3e308f1d70ab2)
+++ b/shared/src/commonMain/kotlin/ru/z8/louttsev/bustrainflightmobile/shared/ResourceReader.kt	(date 1682764620249)
@@ -1,4 +1,4 @@
-package ru.z8.louttsev.bustrainflightmobile.shared
+package ru.z8.louttsev.bustrainflightmobile.androidApp
 
 expect class ResourceReader() {
     fun readResource(name: String): String
